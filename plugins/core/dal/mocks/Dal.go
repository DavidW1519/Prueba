// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	dal "github.com/apache/incubator-devlake/plugins/core/dal"
	mock "github.com/stretchr/testify/mock"
)

// Dal is an autogenerated mock type for the Dal type
type Dal struct {
	mock.Mock
}

// All provides a mock function with given fields: dst, clauses
func (_m *Dal) All(dst interface{}, clauses ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dst)
	_ca = append(_ca, clauses...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(dst, clauses...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AutoMigrate provides a mock function with given fields: entity, clauses
func (_m *Dal) AutoMigrate(entity interface{}, clauses ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, entity)
	_ca = append(_ca, clauses...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(entity, clauses...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: entity, clauses
func (_m *Dal) Create(entity interface{}, clauses ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, entity)
	_ca = append(_ca, clauses...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(entity, clauses...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrUpdate provides a mock function with given fields: entity, clauses
func (_m *Dal) CreateOrUpdate(entity interface{}, clauses ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, entity)
	_ca = append(_ca, clauses...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(entity, clauses...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cursor provides a mock function with given fields: clauses
func (_m *Dal) Cursor(clauses ...interface{}) (dal.Cursor, error) {
	var _ca []interface{}
	_ca = append(_ca, clauses...)
	ret := _m.Called(_ca...)

	var r0 dal.Cursor
	if rf, ok := ret.Get(0).(func(...interface{}) dal.Cursor); ok {
		r0 = rf(clauses...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dal.Cursor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(clauses...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: entity, clauses
func (_m *Dal) Delete(entity interface{}, clauses ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, entity)
	_ca = append(_ca, clauses...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(entity, clauses...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exec provides a mock function with given fields: query, params
func (_m *Dal) Exec(query string, params ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = rf(query, params...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: cursor, dst
func (_m *Dal) Fetch(cursor dal.Cursor, dst interface{}) error {
	ret := _m.Called(cursor, dst)

	var r0 error
	if rf, ok := ret.Get(0).(func(dal.Cursor, interface{}) error); ok {
		r0 = rf(cursor, dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// First provides a mock function with given fields: dst, clauses
func (_m *Dal) First(dst interface{}, clauses ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dst)
	_ca = append(_ca, clauses...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(dst, clauses...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: entity, clauses
func (_m *Dal) Update(entity interface{}, clauses ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, entity)
	_ca = append(_ca, clauses...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(entity, clauses...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewDalT interface {
	mock.TestingT
	Cleanup(func())
}

// NewDal creates a new instance of Dal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDal(t NewDalT) *Dal {
	mock := &Dal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
