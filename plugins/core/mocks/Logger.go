// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	core "github.com/apache/incubator-devlake/plugins/core"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: format, a
func (_m *Logger) Debug(format string, a ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: format, a
func (_m *Logger) Error(format string, a ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: format, a
func (_m *Logger) Info(format string, a ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	_m.Called(_ca...)
}

// IsLevelEnabled provides a mock function with given fields: level
func (_m *Logger) IsLevelEnabled(level core.LogLevel) bool {
	ret := _m.Called(level)

	var r0 bool
	if rf, ok := ret.Get(0).(func(core.LogLevel) bool); ok {
		r0 = rf(level)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Log provides a mock function with given fields: level, format, a
func (_m *Logger) Log(level core.LogLevel, format string, a ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, level, format)
	_ca = append(_ca, a...)
	_m.Called(_ca...)
}

// Nested provides a mock function with given fields: name
func (_m *Logger) Nested(name string) core.Logger {
	ret := _m.Called(name)

	var r0 core.Logger
	if rf, ok := ret.Get(0).(func(string) core.Logger); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Logger)
		}
	}

	return r0
}

// Printf provides a mock function with given fields: format, a
func (_m *Logger) Printf(format string, a ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	_m.Called(_ca...)
}

// Warn provides a mock function with given fields: format, a
func (_m *Logger) Warn(format string, a ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	_m.Called(_ca...)
}

type NewLoggerT interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogger(t NewLoggerT) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
