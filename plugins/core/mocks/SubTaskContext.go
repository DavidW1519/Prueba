// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/apache/incubator-devlake/plugins/core"
	dal "github.com/apache/incubator-devlake/plugins/core/dal"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// SubTaskContext is an autogenerated mock type for the SubTaskContext type
type SubTaskContext struct {
	mock.Mock
}

// GetConfig provides a mock function with given fields: name
func (_m *SubTaskContext) GetConfig(name string) string {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetContext provides a mock function with given fields:
func (_m *SubTaskContext) GetContext() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// GetDal provides a mock function with given fields:
func (_m *SubTaskContext) GetDal() dal.Dal {
	ret := _m.Called()

	var r0 dal.Dal
	if rf, ok := ret.Get(0).(func() dal.Dal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dal.Dal)
		}
	}

	return r0
}

// GetData provides a mock function with given fields:
func (_m *SubTaskContext) GetData() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetDb provides a mock function with given fields:
func (_m *SubTaskContext) GetDb() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// GetLogger provides a mock function with given fields:
func (_m *SubTaskContext) GetLogger() core.Logger {
	ret := _m.Called()

	var r0 core.Logger
	if rf, ok := ret.Get(0).(func() core.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Logger)
		}
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *SubTaskContext) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IncProgress provides a mock function with given fields: quantity
func (_m *SubTaskContext) IncProgress(quantity int) {
	_m.Called(quantity)
}

// SetProgress provides a mock function with given fields: current, total
func (_m *SubTaskContext) SetProgress(current int, total int) {
	_m.Called(current, total)
}

// TaskContext provides a mock function with given fields:
func (_m *SubTaskContext) TaskContext() core.TaskContext {
	ret := _m.Called()

	var r0 core.TaskContext
	if rf, ok := ret.Get(0).(func() core.TaskContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.TaskContext)
		}
	}

	return r0
}

type NewSubTaskContextT interface {
	mock.TestingT
	Cleanup(func())
}

// NewSubTaskContext creates a new instance of SubTaskContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSubTaskContext(t NewSubTaskContextT) *SubTaskContext {
	mock := &SubTaskContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
