id,url,icon_url,number,title,description,epic_key,type,status,original_status,story_point,resolution_date,created_date,updated_date,lead_time_minutes,parent_issue_id,priority,original_estimate_minutes,time_spent_minutes,time_remaining_minutes,creator_id,creator_name,assignee_id,assignee_name,severity,component
gitlab:GithubIssue:339004478,https://github.com/panjf2000/ants/issues/1,,1,测试发现使用池计算时间并没有缩短，只有内存占用变小了。,"""![image](https://user-images.githubusercontent.com/3971390/42390612-0f596eca-817f-11e8-975a-bb8091f5dd5a.png)\r\n您好，我把您的代码拉倒本地，运行了测试，但是发现，测试结果和您截图结果是有差距的，只是内存占用变少了，但是计算的时间并没有您测试的那种提升，希望可以请教一下这里的原因是什么呢？""",,,DONE,,0,2018-07-07T12:58:38.000+08:00,2018-07-07T00:46:59.000+08:00,2018-07-07T12:58:38.000+08:00,731,,,0,0,0,gitlab:GithubUser:3971390,ppmoon,gitlab:GithubUser:0,,,
gitlab:GithubIssue:340102987,https://github.com/panjf2000/ants/issues/2,,2,函数执行保护,"""```\r\nfunc (w *Worker) run() {\r\n\t//atomic.AddInt32(&w.pool.running, 1)\r\n\tgo func() {\r\n\t\tfor f := range w.task {\r\n\t\t\tif f == nil {\r\n\t\t\t\tatomic.AddInt32(&w.pool.running, -1)\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tf()//直接执行了\r\n\t\t\tw.pool.putWorker(w)\r\n\t\t}\r\n\t}()\r\n}\r\n```\r\n\r\n那么会不会出现f执行错误崩溃的情况？\r\n加个执行保护不知道行不行。。。新手。""",,,DONE,,0,2018-07-12T22:04:26.000+08:00,2018-07-11T14:02:56.000+08:00,2018-07-12T22:04:26.000+08:00,1921,,,0,0,0,gitlab:GithubUser:3714381,imnewbe,gitlab:GithubUser:0,,,
gitlab:GithubIssue:344278000,https://github.com/panjf2000/ants/issues/3,,3,workers 使用slice 还是list问题,"""看了下代码， Pool是用slice来装workers， 但Pool的操作中，除了purge和release中需要遍历workers， getWorker和putWorker 都是对队尾出队入队的操作， 是否可以考虑用 container/list ? (假设，还没验证)。\r\n\r\n\r\n另外还有个问题， 在putWokers时有个append操作， 这里是不是可以在NewPool时， 给workers slice 预分配一些空间呢？""",,,DONE,,0,2018-07-26T10:32:41.000+08:00,2018-07-25T11:22:01.000+08:00,2018-07-26T10:32:41.000+08:00,1390,,,0,0,0,gitlab:GithubUser:16658738,barryz,gitlab:GithubUser:0,,,
gitlab:GithubIssue:346842831,https://github.com/panjf2000/ants/issues/5,,5,关于 <-p.freeSignal 的疑惑,"""Hi,\r\n    我阅读了源码，对 `<-p.freeSignal` 这句代码有疑惑。 这句代码出现在了多个地方，freeSignal 的作用英文注释我是理解的，并且知道在 `putWorker` 中才进行 `p.freeSignal <- sig{}`\r\n\r\n对于下面的代码\r\n```\r\nfunc (p *Pool) getWorker() *Worker {\r\n\tvar w *Worker\r\n\twaiting := false\r\n\r\n\tp.lock.Lock()\r\n\tidleWorkers := p.workers\r\n\tn := len(idleWorkers) - 1\r\n\tif n < 0 { // 说明 pool中没有worker了\r\n\t\twaiting = p.Running() >= p.Cap()\r\n\t} else { // 说明pool中有worker\r\n\t\t<-p.freeSignal      \r\n\t\tw = idleWorkers[n]  \r\n\t\tidleWorkers[n] = nil\r\n\t\tp.workers = idleWorkers[:n]\r\n\t}\r\n\tp.lock.Unlock()\r\n\r\n\r\nfunc (p *Pool) Release() error {\r\n\tp.once.Do(func() { // 保证只释放一次\r\n\t\tp.release <- sig{}\r\n\t\tp.lock.Lock()\r\n\t\tidleWorkers := p.workers\r\n\t\tfor i, w := range idleWorkers {\r\n\t\t\t<-p.freeSignal\r\n\t\t\tw.task <- nil\r\n\t\t\tidleWorkers[i] = nil\r\n\t\t}\r\n\t\tp.workers = nil\r\n\t\tp.lock.Unlock()\r\n\t})\r\n\treturn nil\r\n}\r\n\r\n```\r\n\r\n中的 `<-p.freeSignal`， 那不是要等putWorker触发了才会继续进行吗？如果 putWorker不触发，就一直阻塞在那了，即使 idleWorkers 中可能是有worker的\r\n\r\n可否解释下这边的逻辑？谢谢""",,,DONE,,0,2018-08-03T23:32:00.000+08:00,2018-08-02T11:09:57.000+08:00,2018-08-10T12:06:36.000+08:00,2182,,,0,0,0,gitlab:GithubUser:8605102,pathbox,gitlab:GithubUser:0,,,
gitlab:GithubIssue:347255859,https://github.com/panjf2000/ants/issues/6,,6,死锁bug,"""func (p *Pool) getWorker() *Worker  这个函数的 199行 \r\n必须先解锁在加锁， 要不然会产生死锁\r\n\r\n\tp.lock.Unlock()\r\n\t\t<-p.freeSignal\r\n\t\tp.lock.Lock()""",,BUG,DONE,,0,2018-08-04T18:18:41.000+08:00,2018-08-03T12:32:28.000+08:00,2018-08-04T18:18:41.000+08:00,1786,,,0,0,0,gitlab:GithubUser:13118848,lovelly,gitlab:GithubUser:0,,,
gitlab:GithubIssue:348630179,https://github.com/panjf2000/ants/issues/7,,7,清理过期协程报错,"""你好，非常感谢提供这么好用的工具包。我在使用ants时，发现报异常。结果见下图\r\n![image](https://user-images.githubusercontent.com/4555057/43823431-98384444-9b21-11e8-880c-7458b931734a.png)\r\n日志是我在periodicallyPurge里加的调试信息\r\n![image](https://user-images.githubusercontent.com/4555057/43823534-e3c624a8-9b21-11e8-96c6-512e3e08db22.png)\r\n\r\n### 原因分析\r\n\r\n我认为可能原因是没有处理n==0的情况\r\n```\r\nif n > 0 {\r\n\tn++\r\n\tp.workers = idleWorkers[n:]\r\n}\r\n```\r\n\r\n\r\n### 测试代码\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\""github.com/panjf2000/ants\""\r\n\t\""fmt\""\r\n\t\""time\""\r\n\t\""strconv\""\r\n)\r\n\r\nfunc main() {\r\n\r\n\tpool,err := ants.NewPool(100000)\r\n\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tfor i:=0;i<10000;i++{\r\n\t\tpool.Submit(\r\n\t\t\tfunc() error {\r\n\t\t\t\ttime.Sleep(1 * time.Millisecond)\r\n\t\t\t\tfmt.Println(strconv.Itoa(i))\r\n\t\t\t\treturn nil\r\n\t\t\t})\r\n\t}\r\n\r\n\tfor{\r\n\t\tpool.Submit(\r\n\t\t\tfunc() error {\r\n\t\t\t\ttime.Sleep(10 * time.Millisecond)\r\n\t\t\treturn nil\r\n\t\t})\r\n\t\ttime.Sleep(1 * time.Millisecond)\r\n\t}\r\n}\r\n```""",,BUG,DONE,,0,2018-08-10T12:06:04.000+08:00,2018-08-08T16:43:15.000+08:00,2018-08-10T12:06:04.000+08:00,2602,,,0,0,0,gitlab:GithubUser:4555057,huiwq1990,gitlab:GithubUser:0,,,
gitlab:GithubIssue:356703393,https://github.com/panjf2000/ants/issues/10,,10,高并发下设定较小的worker数量问题,"""会存在cpu飚升的问题吧？""",,,DONE,,0,2018-09-29T19:45:00.000+08:00,2018-09-04T16:26:55.000+08:00,2018-09-29T19:45:00.000+08:00,36198,,,0,0,0,gitlab:GithubUser:11763614,Moonlight-Zhao,gitlab:GithubUser:0,,,
gitlab:GithubIssue:364361014,https://github.com/panjf2000/ants/issues/12,,12,潘少，更新下tag吧,"""鄙人现在在弄dep依赖管理，有用到你写的ants项目，可是你好像忘记打最新的tag了。最新的tag 3.6是指向ed55924这个提交，git上的最新代码是af376f1b这次提交，两次提交都隔了快5个月了，看到的话，麻烦打一个最新的tag吧。（手动可怜）""",,,DONE,,0,2018-09-28T14:05:58.000+08:00,2018-09-27T16:32:25.000+08:00,2019-04-21T16:19:58.000+08:00,1293,,,0,0,0,gitlab:GithubUser:29452204,edcismybrother,gitlab:GithubUser:0,,,
gitlab:GithubIssue:424634533,https://github.com/panjf2000/ants/issues/29,,29,任务传参,"""你好，你的项目太酷了👍\r\n\r\nhttps://github.com/panjf2000/ants/blob/master/pool.go#L124 貌似不支持带参数的任务, 请问传参是用闭包的方式吗?\r\n""",,,DONE,,0,2019-03-25T17:32:11.000+08:00,2019-03-25T00:52:21.000+08:00,2019-03-25T17:45:05.000+08:00,999,,,0,0,0,gitlab:GithubUser:8509898,prprprus,gitlab:GithubUser:0,,,
gitlab:GithubIssue:381941219,https://github.com/panjf2000/ants/issues/17,,17,关于优雅退出的问题,"""关于这个package优雅退出的问题，我看了一下Release的代码：\r\n\r\n`\r\n\t// Release Closed this pool.\r\n\tfunc (p *PoolWithFunc) Release() error {\r\n\t\tp.once.Do(func() {\r\n\t\t\tp.release <- sig{}\r\n\t\t\tp.lock.Lock()\r\n\t\t\tidleWorkers := p.workers\r\n\t\t\tfor i, w := range idleWorkers {\r\n\t\t\t\tw.args <- nil\r\n\t\t\t\tidleWorkers[i] = nil\r\n\t\t\t}\r\n\t\t\tp.workers = nil\r\n\t\t\tp.lock.Unlock()\r\n\t\t})\r\n\t\treturn nil\r\n\t}\r\n`\r\n\r\nrelease中，好像没有去等待那些已经正在工作的worker处理完它们的工作？\r\n仅仅是回收了空闲的worker\r\n\r\n那么在收到程序退出的信号时候，release是不能确保正在工作的worker能妥善完成工作\r\n\r\n如果想实现比较好退出方式目前好像是：\r\n\r\nReSize(0) \r\n\r\n不知道我理解的对不对？\r\n""",,,DONE,,0,2019-01-29T15:24:37.000+08:00,2018-11-18T16:50:31.000+08:00,2019-01-29T15:24:37.000+08:00,103594,,,0,0,0,gitlab:GithubUser:7931755,zplzpl,gitlab:GithubUser:0,,,
gitlab:GithubIssue:382039050,https://github.com/panjf2000/ants/issues/18,,18,go协程的理解,"""你好楼主，向您请教一个协程和线程的问题，协程基于go进程调度，线程基于系统内核调度，调度协程的过程是先调度线程后获得资源再去调度协程。\""官方解释： GOMAXPROCS sets the maximum number of CPUs that can be executing simultaneously。限制cpu数，本质上是什么，限制并行数?，并行数即同时执行数量?，执行单元即线程?，即限制最大并行线程数量?\""""",,,DONE,,0,2018-12-03T11:53:50.000+08:00,2018-11-19T10:59:53.000+08:00,2018-12-03T11:53:50.000+08:00,20213,,,0,0,0,gitlab:GithubUser:13944100,LinuxForYQH,gitlab:GithubUser:0,,,
gitlab:GithubIssue:382574800,https://github.com/panjf2000/ants/issues/20,,20,是否考虑任务支持回调函数处理失败的逻辑和任务依赖,"""#""",,,DONE,,0,2019-01-25T23:34:03.000+08:00,2018-11-20T17:36:02.000+08:00,2019-01-25T23:34:03.000+08:00,95398,,,0,0,0,gitlab:GithubUser:5668717,kklinan,gitlab:GithubUser:0,,,
gitlab:GithubIssue:388907811,https://github.com/panjf2000/ants/issues/21,,21,Benchmark 下直接使用 Semaphore 似乎更快呢？,"""简单跑了一下 benchmark，Semaphore 更快且很简单\r\n\r\n```bash\r\n$ go test -bench .\r\ngoos: darwin\r\ngoarch: amd64\r\npkg: github.com/panjf2000/ants\r\nBenchmarkGoroutineWithFunc-4   \t       1\t3445631705 ns/op\r\nBenchmarkSemaphoreWithFunc-4   \t       1\t1037219073 ns/op\r\nBenchmarkAntsPoolWithFunc-4    \t       1\t1138053222 ns/op\r\nBenchmarkGoroutine-4           \t       2\t 731850771 ns/op\r\nBenchmarkSemaphore-4           \t       2\t 914855967 ns/op\r\nBenchmarkAntsPool-4            \t       1\t1094379445 ns/op\r\nPASS\r\nok  \tgithub.com/panjf2000/ants\t33.173s\r\n```\r\n那 Ants 在什么情况下有优势呢？""",,,DONE,,0,2018-12-14T14:01:07.000+08:00,2018-12-08T18:08:17.000+08:00,2018-12-14T14:01:07.000+08:00,8392,,,0,0,0,gitlab:GithubUser:720086,huangjunwen,gitlab:GithubUser:0,,,
gitlab:GithubIssue:401277739,https://github.com/panjf2000/ants/issues/22,,22,是否考虑 worker 中添加  PanicHandler ？,"""比方说在创建 Pool 的时候传入一个 PanicHandler，然后在每个 worker 创建的时候 recover 之后传给 PanicHandler  处理。否则池子里如果发生 panic 会直接挂掉整个进程。""",,,DONE,,0,2019-01-22T13:41:34.000+08:00,2019-01-21T18:06:56.000+08:00,2019-01-22T13:41:34.000+08:00,1174,,,0,0,0,gitlab:GithubUser:8923413,choleraehyq,gitlab:GithubUser:0,,,
gitlab:GithubIssue:402513849,https://github.com/panjf2000/ants/issues/24,,24,提交任务不阻塞,"""`Pool.Submit`和`PoolWithFunc.Server`提交任务，如果没有空的worker，会一直阻塞。建议增加不阻塞的接口，当前失败时直接返回错误。""",,,DONE,,0,2019-08-20T18:56:30.000+08:00,2019-01-24T10:24:13.000+08:00,2019-08-20T18:56:30.000+08:00,300032,,,0,0,0,gitlab:GithubUser:5044825,tenfyzhong,gitlab:GithubUser:0,,,
gitlab:GithubIssue:405951301,https://github.com/panjf2000/ants/issues/25,,25,use example errors,"""./antstest.go:37:14: cannot use syncCalculateSum (type func()) as type ants.f in argument to ants.Submit\r\n./antstest.go:45:35: cannot use func literal (type func(interface {})) as type ants.pf in argument to ants.NewPoolWithFunc\r\n""",,,DONE,,0,2019-02-04T17:11:52.000+08:00,2019-02-02T13:43:38.000+08:00,2019-02-04T17:11:52.000+08:00,3088,,,0,0,0,gitlab:GithubUser:5244267,jiashiwen,gitlab:GithubUser:0,,,
gitlab:GithubIssue:413968505,https://github.com/panjf2000/ants/issues/26,,26,running可能大于cap的问题,"""running与cap的比较判断与incRuning分开执行的, 可能会出现running大于cap的问题?\r\n`func (p *Pool) retrieveWorker() *Worker {\r\n\tvar w *Worker\r\n\r\n\tp.lock.Lock()\r\n\tidleWorkers := p.workers\r\n\tn := len(idleWorkers) - 1\r\n\tif n >= 0 {\r\n\t\tw = idleWorkers[n]\r\n\t\tidleWorkers[n] = nil\r\n\t\tp.workers = idleWorkers[:n]\r\n\t\tp.lock.Unlock()\r\n\t} else if p.Running() < p.Cap() {\r\n\t\tp.lock.Unlock()\r\n\t\tif cacheWorker := p.workerCache.Get(); cacheWorker != nil {\r\n\t\t\tw = cacheWorker.(*Worker)\r\n\t\t} else {\r\n\t\t\tw = &Worker{\r\n\t\t\t\tpool: p,\r\n\t\t\t\ttask: make(chan func(), workerChanCap),\r\n\t\t\t}\r\n\t\t}\r\n\t\tw.run()`""",,,DONE,,0,2019-03-12T20:01:57.000+08:00,2019-02-25T15:29:33.000+08:00,2019-03-12T20:01:57.000+08:00,21872,,,0,0,0,gitlab:GithubUser:10361713,Ainiroad,gitlab:GithubUser:0,,,
gitlab:GithubIssue:419183961,https://github.com/panjf2000/ants/issues/27,,27,为何goroutine一直上不去，用户量也打不上去,"""为何goroutine一直上不去，用户量也打不上去\r\n是我用的有问题吗？\r\n\r\nwebsocket server\r\nhttps://github.com/im-ai/pushm/blob/master/learn/goroutine/goroutinepoolwebsocket.go\r\n\r\nwebsocket cient\r\nhttps://github.com/im-ai/pushm/blob/master/learn/goroutine/goroutinepoolwebsocketclient.go\r\n""",,,DONE,,0,2019-04-05T22:05:20.000+08:00,2019-03-10T21:08:52.000+08:00,2019-04-05T22:05:20.000+08:00,37496,,,0,0,0,gitlab:GithubUser:38367404,liliang8858,gitlab:GithubUser:0,,,
gitlab:GithubIssue:419268851,https://github.com/panjf2000/ants/issues/28,,28,cap 和 running 比较的问题,"""这是我在 Playground 上面的代码 https://play.golang.org/p/D94YUU3FnX6\r\natomic 只能保证自增自减时的原子操作，在比较过程中，其他线程对变量进行了操作 比较过程并无感知，所以这个比较结果 不是完全正确的，想要实现 比较的数量完全正确，只能在修改和比较两个值的地方加锁\r\n像 #26 说的是对的""",,,DONE,,0,2019-08-23T00:27:37.000+08:00,2019-03-11T10:24:41.000+08:00,2019-08-23T00:27:37.000+08:00,237002,,,0,0,0,gitlab:GithubUser:29243953,naiba,gitlab:GithubUser:0,,,
gitlab:GithubIssue:429972115,https://github.com/panjf2000/ants/issues/31,,31,Add go.mod,"""""",,,DONE,,0,2019-04-08T17:45:31.000+08:00,2019-04-06T07:50:36.000+08:00,2019-10-17T11:12:19.000+08:00,3474,,,0,0,0,gitlab:GithubUser:48135919,tsatke,gitlab:GithubUser:0,,,
gitlab:GithubIssue:433564955,https://github.com/panjf2000/ants/issues/32,,32,关于版本问题，我发现小版本(0.0.x)这种更新就会不向下兼容？,"""如题，我感觉这样不好。\r\n\r\n功能版本号不向下兼容能理解\r\n\r\n修复问题的版本号也不向下兼容，难以理解。""",,,DONE,,0,2019-04-21T15:16:26.000+08:00,2019-04-16T11:16:02.000+08:00,2019-04-21T15:16:26.000+08:00,7440,,,0,0,0,gitlab:GithubUser:7931755,zplzpl,gitlab:GithubUser:0,,,
gitlab:GithubIssue:434069015,https://github.com/panjf2000/ants/issues/33,,33,support semantic versioning.,"""建议将发布的tag兼容为semantic versioning，vX.Y.Z。go modules对此支持比较良好。\r\nhttps://semver.org/\r\nhttps://research.swtch.com/vgo-import""",,,DONE,,0,2019-04-21T16:25:20.000+08:00,2019-04-17T10:55:11.000+08:00,2019-04-21T16:25:20.000+08:00,6090,,,0,0,0,gitlab:GithubUser:1284892,jjeffcaii,gitlab:GithubUser:0,,,
gitlab:GithubIssue:435486645,https://github.com/panjf2000/ants/issues/34,,34,Important announcement about <ants> from author !!!,"""**Dear users of `ants`:**\r\nI am apologetically telling you that I have to dump all tags which already presents in `ants` repository.\r\n\r\nThe reason why I'm doing so is to standardize the version management with `Semantic Versioning`, which will make a formal and clear dependency management in go, for go modules, godep, or glide, etc. So I decide to start over the tag sequence, you could find more details in [Semantic Versioning](https://semver.org/) and [Semantic Import Versioning](https://research.swtch.com/vgo-import), related issue: #32, #33 (very thankful to @jjeffcaii and @zplzpl who provided the suggestions about it).\r\n\r\nI ought to apologize for the bothers brought by this change, the arch-criminal who leads to this issue would be my lack of concept about `Semantic Versioning`, I will spend more times learning the knowledge afterwards. \r\n\r\nOnce again, sorry for your costs in this change and thanks for your support to `ants`! \r\n\r\n*Have fun!*\r\n\r\n**Best regards,\r\nAndy Pan**\r\n""",,,DONE,,0,2019-05-07T23:35:08.000+08:00,2019-04-21T16:10:28.000+08:00,2019-05-07T23:35:08.000+08:00,23484,,,0,0,0,gitlab:GithubUser:7496278,panjf2000,gitlab:GithubUser:0,,,
gitlab:GithubIssue:461280653,https://github.com/panjf2000/ants/issues/35,,35,worker exit on panic,"""个人认为PanicHandler设计不妥。\r\n1.无PanicHandler时，抛出给外面的不是panic,外层感受不到。\r\n2.无论有没有PanicHandler，都会导致worker退出，最终pool阻塞住全部任务。""",,,DONE,,0,2019-08-18T04:33:10.000+08:00,2019-06-27T11:11:49.000+08:00,2019-08-18T04:33:10.000+08:00,74481,,,0,0,0,gitlab:GithubUser:38849208,king526,gitlab:GithubUser:0,,,
gitlab:GithubIssue:462631417,https://github.com/panjf2000/ants/issues/37,,37,请不要再随意变更版本号了。。。,"""之前用的是 3.9.9，结果今天构建出了问题，一看发现这个版本没了，变成 1.0.0。这种变更完全不考虑现有用户的情况。希望以后不要随意变更了""",,,DONE,,0,2019-07-01T20:37:55.000+08:00,2019-07-01T18:17:15.000+08:00,2019-07-02T18:17:31.000+08:00,140,,,0,0,0,gitlab:GithubUser:8923413,choleraehyq,gitlab:GithubUser:0,,,
gitlab:GithubIssue:472125082,https://github.com/panjf2000/ants/issues/38,,38,retrieveWorker与revertWorker之间会导致死锁,"""func (p *Pool) retrieveWorker() *Worker {\r\n\tvar w *Worker\r\n\r\n\t**p.lock.Lock()**\r\n\tidleWorkers := p.workers\r\n\tn := len(idleWorkers) - 1\r\n\tif n >= 0 {\r\n\t\tw = idleWorkers[n]\r\n\t\tidleWorkers[n] = nil\r\n\t\tp.workers = idleWorkers[:n]\r\n\t\tp.lock.Unlock()\r\n\t} else if p.Running() < p.Cap() {\r\n\t\tp.lock.Unlock()\r\n\t\tif cacheWorker := p.workerCache.Get(); cacheWorker != nil {\r\n\t\t\tw = cacheWorker.(*Worker)\r\n\t\t} else {\r\n\t\t\tw = &Worker{\r\n\t\t\t\tpool: p,\r\n\t\t\t\ttask: make(chan func(), workerChanCap),\r\n\t\t\t}\r\n\t\t}\r\n\t\tw.run()\r\n\t} else {\r\n\t\tfor {\r\n\t\t\t**p.cond.Wait()** \r\n\t\t\tl := len(p.workers) - 1\r\n\t\t\tif l < 0 {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tw = p.workers[l]\r\n\t\t\tp.workers[l] = nil\r\n\t\t\tp.workers = p.workers[:l]\r\n\t\t\tbreak\r\n\t\t}\r\n\t\t**p.lock.Unlock()**\r\n\t}\r\n\treturn w\r\n}\r\n\r\n// revertWorker puts a worker back into free pool, recycling the goroutines.\r\nfunc (p *Pool) revertWorker(worker *Worker) bool {\r\n\tif CLOSED == atomic.LoadInt32(&p.release) {\r\n\t\treturn false\r\n\t}\r\n\tworker.recycleTime = time.Now()\r\n\t**p.lock.Lock()** // 协程池满了之后获取不到锁\r\n\tp.workers = append(p.workers, worker)\r\n\t// Notify the invoker stuck in 'retrieveWorker()' of there is an available worker in the worker queue.\r\n\tp.cond.Signal()\r\n\t**p.lock.Unlock()**\r\n\treturn true\r\n}\r\n""",,,DONE,,0,2019-07-24T16:40:01.000+08:00,2019-07-24T15:32:58.000+08:00,2019-07-24T16:40:01.000+08:00,67,,,0,0,0,gitlab:GithubUser:1290360,wwjiang,gitlab:GithubUser:0,,,
gitlab:GithubIssue:483164833,https://github.com/panjf2000/ants/issues/42,,42,带选项的初始化函数，我觉得用 functional options 更好一点,"""以下是示意代码\r\n如果用 functional options，原来的写法是\r\n```\r\nants.NewPool(10)\r\n```\r\n新的写法，如果不加 option，写法是不变的，因为 options 是作为可变参数传进去的。如果要加 option，只需要改成\r\n```\r\nants.NewPool(10, ants.WithNonblocking(true))\r\n```\r\n这样。\r\n\r\n现在是直接传一个 Option 结构体进去，所有的地方都要改，感觉很不优雅。\r\n具体 functional options 的设计可以看 rob pike 的一篇博客 https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html""",,,DONE,,0,2019-08-21T22:32:51.000+08:00,2019-08-21T10:20:08.000+08:00,2019-08-21T22:32:51.000+08:00,732,,,0,0,0,gitlab:GithubUser:8923413,choleraehyq,gitlab:GithubUser:0,,,
gitlab:GithubIssue:483736247,https://github.com/panjf2000/ants/issues/43,,43,1.3.0 是不兼容更新,"""Pool 里那些暴露出来的字段（PanicHandler 之类的）都没了，这是一个不兼容更新，根据语义化版本的要求要发大版本。""",,,DONE,,0,2019-08-22T21:22:10.000+08:00,2019-08-22T10:29:34.000+08:00,2019-08-22T21:22:10.000+08:00,652,,,0,0,0,gitlab:GithubUser:8923413,choleraehyq,gitlab:GithubUser:0,,,
gitlab:GithubIssue:484311063,https://github.com/panjf2000/ants/issues/44,,44,1.1.1 -> 1.2.0 也是不兼容更新,"""Pool.Release 的返回值没了""",,,DONE,,0,2019-08-25T14:36:14.000+08:00,2019-08-23T11:27:38.000+08:00,2019-08-25T14:36:14.000+08:00,3068,,,0,0,0,gitlab:GithubUser:8923413,choleraehyq,gitlab:GithubUser:0,,,
gitlab:GithubIssue:484885860,https://github.com/panjf2000/ants/issues/45,,45,"p.Tune is only for cutting down pool size, but not support enlarge.","""In the Tune Method, the scale up the pool size should be supported also. \r\nSo, before do the pool size change, check which one is bigger for the p.Running() and size, the using the bigger one to minus the small one, then assign the result to diff. \r\nWhat do you think? \r\n-------------------------------\r\nfunc (p *Pool) Tune(size uint) \r\n...\r\n**### diff := p.Running() - int(size)**\r\n\tfor i := 0; i < diff; i++ {\r\n\t\tp.retrieveWorker().task <- nil\r\n\t}""",,,DONE,,0,2019-08-25T14:20:09.000+08:00,2019-08-25T11:31:11.000+08:00,2019-08-25T14:20:09.000+08:00,168,,,0,0,0,gitlab:GithubUser:31562832,laodano1,gitlab:GithubUser:0,,,
gitlab:GithubIssue:484923460,https://github.com/panjf2000/ants/issues/46,,46,About the ExpiryDuration of ants,"""worker的ExpiryDuration时间怎么设置，一般设置成多少比较合适？""",,,DONE,,0,2019-08-27T13:13:44.000+08:00,2019-08-25T20:04:29.000+08:00,2019-08-27T13:13:44.000+08:00,2469,,,0,0,0,gitlab:GithubUser:41182093,ymichaelson,gitlab:GithubUser:0,,,
gitlab:GithubIssue:485565755,https://github.com/panjf2000/ants/issues/47,,47,Nonstandard operation to the Existing tag,"""我们的项目依赖了 2.0.0-alpha，今天一构建发现 2.0.0-alpha 又没了""",,,DONE,,0,2019-08-27T13:10:32.000+08:00,2019-08-27T11:44:02.000+08:00,2019-08-27T13:10:32.000+08:00,86,,,0,0,0,gitlab:GithubUser:8923413,choleraehyq,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:491601411,https://github.com/panjf2000/ants/issues/49,,49,Checksum mismatch for go 1.13,"""Expect (go version go1.12.9 darwin/amd64):\r\n\r\n```\r\n→ go mod tidy -v\r\ngo: downloading github.com/panjf2000/ants v1.2.0\r\ngo: extracting github.com/panjf2000/ants v1.2.0\r\n```\r\n\r\nActual (go version go1.13 darwin/amd64)\r\n```\r\n→ go mod tidy -v\r\nverifying github.com/panjf2000/ants@v1.2.0: checksum mismatch\r\n        downloaded: h1:Ufw4aDz9RqH1RVblx2W9L9Uv5vSX5apbX5+peR7LQ5k=\r\n        sum.golang.org: h1:pMQ1/XpSgnWx3ro4y1xr/uA3jXUsTuAaU3Dm0JjwggE=\r\n\r\nSECURITY ERROR\r\nThis download does NOT match the one reported by the checksum server.\r\nThe bits may have been replaced on the origin server, or an attacker may\r\nhave intercepted the download attempt.\r\n\r\nFor more information, see 'go help module-auth'.\r\n```\r\n\r\n---\r\n\r\n**UPD**: mb this issue will be useful - https://github.com/golang/go/issues/33665\r\n\r\n---\r\n\r\n**UPD**: how resolve issue step by step (macOS):\r\n- sudo go clean -modcache\r\n- git checkout go.sum\r\n- go mod tidy -v\r\n\r\n---\r\n\r\n**UPD** for Linux:\r\n- `cd /another/path`\r\n- `go clean -modcache`\r\n- `cd /project/path`\r\n- `go mod tidy`""",,,DONE,,0,2021-06-26T22:22:09.000+08:00,2019-09-10T19:00:06.000+08:00,2021-06-26T22:22:09.000+08:00,943402,,,0,0,0,gitlab:GithubUser:888650,im-kulikov,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:492083734,https://github.com/panjf2000/ants/issues/50,,50,worker 在 revertworker 返回 false 退出时没有 decRunning,"""**Describe the bug**\r\nA clear and concise description of what the bug is.\r\nretrieveWorker 中，有一个分支是判 p.Running() < p.Cap()，然后 spawnWorker；由于这个地方没锁，可能很多个 goroutine 都进入到了这个地方，超过了 Cap 的数量。\r\n\r\nworker 完成工作之后，revertWorker，会发现 Running > Cap ，返回 false，worker 就会退出，退出前没有减 Running，导致 Running 始终大于 Cap，池子卡死。\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to '...'\r\n2. Click on '....'\r\n3. Scroll down to '....'\r\n4. See error\r\n生产环境高负载下压出来的。\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n导致池子卡住。\r\n\r\n**Error messages/Trace logs**\r\nIf applicable, add some logs to help explain your problem.\r\n\r\n**System info (please complete the following information):**\r\n - OS: [e.g. linux, macOS]\r\n - Go Version [e.g. 1.12]\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n""",,BUG,DONE,,0,2019-09-12T09:00:52.000+08:00,2019-09-11T16:12:26.000+08:00,2019-09-12T09:00:52.000+08:00,1008,,,0,0,0,gitlab:GithubUser:8923413,choleraehyq,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:492130196,https://github.com/panjf2000/ants/issues/52,,52,workerCache 没有初始化,"""**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n没有设置 New 函数，这个是忘了还是有什么玄机呢\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to '...'\r\n2. Click on '....'\r\n3. Scroll down to '....'\r\n4. See error\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Error messages/Trace logs**\r\nIf applicable, add some logs to help explain your problem.\r\n\r\n**System info (please complete the following information):**\r\n - OS: [e.g. linux, macOS]\r\n - Go Version [e.g. 1.12]\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n""",,,DONE,,0,2019-09-11T21:06:46.000+08:00,2019-09-11T17:46:11.000+08:00,2019-09-11T21:06:46.000+08:00,200,,,0,0,0,gitlab:GithubUser:8923413,choleraehyq,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:509545524,https://github.com/panjf2000/ants/issues/55,,55,是否可以添加SubmitQueue类似的接口,"""现在submit的任务执行顺序可以认为是随机的，但是有应用的情况是处理数据时有顺序关系，用户可以用队列来处理此类任务，但是每个task handler中都增加了队列的代码，感觉还是有点累赘。\r\n\r\n如果ants有SumbitQueue(queueName interface{}, task func())error 这样的接口，则使用起来感觉方便很多""",,,DONE,,0,2019-10-20T22:05:46.000+08:00,2019-10-20T12:45:37.000+08:00,2019-10-20T22:05:47.000+08:00,560,,,0,0,0,gitlab:GithubUser:47293522,yangjuncode,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:513276141,https://github.com/panjf2000/ants/issues/56,,56,非阻塞在PoolOverload时进入等待队列,"""**Is your feature request related to a problem? Please describe.**\r\nsubmit的函数如果是递归函数，则如果是阻塞模式，在递归深度较大的时候，会因为worker用光，程序直接被阻塞了，如果调整为非阻塞模式，则会在worker用光之后，后面的任务直接返回ErrPoolOverload而被舍弃。我是在遍历目录的时候遇到的这个问题。\r\n\r\n**Describe the solution you'd like**\r\n增加一个配置项，非阻塞模式下，可以选择增加一个等待队列，而不是舍弃。\r\n\r\n**Describe alternatives you've considered**\r\n增加一个channel，用于task完成后通知等待队列\r\n\r\n\r\n""",,REQUIREMENT,DONE,,0,2019-10-28T23:29:24.000+08:00,2019-10-28T20:33:09.000+08:00,2019-10-28T23:29:24.000+08:00,176,,,0,0,0,gitlab:GithubUser:16379361,HaoKunT,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:515876300,https://github.com/panjf2000/ants/issues/57,,57,请问 bytedance 的什么项目使用了 ants？,"""看 readme 里写了 bytedance""",,,DONE,,0,2019-11-01T13:13:48.000+08:00,2019-11-01T10:39:33.000+08:00,2019-11-01T13:13:48.000+08:00,154,,,0,0,0,gitlab:GithubUser:8923413,choleraehyq,gitlab:GithubUser:0,,,
gitlab:GithubIssue:519634014,https://github.com/panjf2000/ants/issues/58,,58,业务逻辑 panic 问题,"""`package main\r\n\r\nimport (\r\n\t\""fmt\""\r\n\t\""net\""\r\n\t\""sync\""\r\n\t\""time\""\r\n\r\n\t\""github.com/panjf2000/ants/v2\""\r\n)\r\n\r\n\r\n\r\nfunc doPortScan(i interface{}) {\r\n\t\r\n\tport := i.(int32)\r\n\r\n\t_, err := net.DialTimeout(\""tcp\"", fmt.Sprintf(\""192.168.20.1:%d\"", port), time.Second*1)\r\n\tif err != nil {\r\n\t\treturn\r\n\t}\r\n\r\n\tfmt.Printf(\""Port  %d is open\\n\"", port)\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunc main() {\r\n\tdefer ants.Release()\r\n\r\n\trunTimes := 65535\r\n\r\n\t// Use the common pool.\r\n\tvar wg sync.WaitGroup\r\n\r\n\r\n\t// Use the pool with a method,\r\n\t// set 10 to the capacity of goroutine pool and 1 second for expired duration.\r\n\tp, _ := ants.NewPoolWithFunc(300, func(i interface{}) {\r\n\t\tdoPortScan(i)\r\n\t\twg.Done()\r\n\t})\r\n\tdefer p.Release()\r\n\t// Submit tasks one by one.\r\n\tfor i := 0; i < runTimes; i++ {\r\n\t\twg.Add(1)\r\n\r\n\t\t_ = p.Invoke(int32(i))\r\n\t}\r\n\twg.Wait()\r\n\tfmt.Printf(\""running goroutines: %d\\n\"", p.Running())\r\n\r\n}\r\n`\r\n崩溃时的现象如下：\r\n`\r\ngoroutine 543 [runnable]:\r\ngithub.com/panjf2000/ants/v2.(*goWorkerWithFunc).run.func1(0xc000255e00)\r\n\t/Users/mac/go/src/github.com/panjf2000/ants/worker_func.go:65 +0x85\r\ncreated by github.com/panjf2000/ants/v2.(*goWorkerWithFunc).run\r\n\t/Users/mac/go/src/github.com/panjf2000/ants/worker_func.go:49 +0x4c\r\n\r\ngoroutine 544 [runnable]:\r\nsyscall.syscall(0x108b820, 0x25, 0xc00048800c, 0x10, 0xffffffffffffffff, 0xffffffffffffffff, 0x24)\r\n\t/usr/local/go/src/runtime/sys_darwin.go:63 +0x2e\r\nsyscall.connect(0x25, 0xc00048800c, 0x10, 0x0, 0x0)\r\n\t/usr/local/go/src/syscall/zsyscall_darwin_amd64.go:91 +0x5c\r\nsyscall.Connect(0x25, 0x1158f40, 0xc000488000, 0x111ac80, 0x1)\r\n\t/usr/local/go/src/syscall/syscall_unix.go:251 +0x62\r\nnet.(*netFD).connect(0xc0000e2180, 0x115a280, 0xc0003ff200, 0x0, 0x0, 0x1158f40, 0xc000488000, 0x0, 0x0, 0x0, ...)\r\n\t/usr/local/go/src/net/fd_unix.go:70 +0x7b\r\nnet.(*netFD).dial(0xc0000e2180, 0x115a280, 0xc0003ff200, 0x115a7a0, 0x0, 0x115a7a0, 0xc000255e90, 0x0, 0x1, 0xc000061890)\r\n\t/usr/local/go/src/net/sock_posix.go:149 +0xff\r\nnet.socket(0x115a280, 0xc0003ff200, 0x1133ff4, 0x3, 0x2, 0x1, 0x0, 0x0, 0x115a7a0, 0x0, ...)\r\n\t/usr/local/go/src/net/sock_posix.go:70 +0x1c0\r\nnet.internetSocket(0x115a280, 0xc0003ff200, 0x1133ff4, 0x3, 0x115a7a0, 0x0, 0x115a7a0, 0xc000255e90, 0x1, 0x0, ...)\r\n\t/usr/local/go/src/net/ipsock_posix.go:141 +0x141\r\nnet.(*sysDialer).doDialTCP(0xc0000e2100, 0x115a280, 0xc0003ff200, 0x0, 0xc000255e90, 0x110a680, 0x123ab20, 0x0)\r\n\t/usr/local/go/src/net/tcpsock_posix.go:65 +0xc2\r\nnet.(*sysDialer).dialTCP(0xc0000e2100, 0x115a280, 0xc0003ff200, 0x0, 0xc000255e90, 0xc034fda0d3, 0x121ffc0, 0xc000061ad0)\r\n\t/usr/local/go/src/net/tcpsock_posix.go:61 +0xd7\r\nnet.(*sysDialer).dialSingle(0xc0000e2100, 0x115a280, 0xc0003ff200, 0x11593c0, 0xc000255e90, 0x0, 0x0, 0x0, 0x0)\r\n\t/usr/local/go/src/net/dial.go:578 +0x36e\r\nnet.(*sysDialer).dialSerial(0xc0000e2100, 0x115a280, 0xc0003ff200, 0xc0000b38a0, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0)\r\n\t/usr/local/go/src/net/dial.go:546 +0x221\r\nnet.(*Dialer).DialContext(0xc000061e40, 0x115a240, 0xc0000ce008, 0x1133ff4, 0x3, 0xc0000ce6f0, 0x10, 0x0, 0x0, 0x0, ...)\r\n\t/usr/local/go/src/net/dial.go:424 +0x666\r\nnet.(*Dialer).Dial(...)\r\n\t/usr/local/go/src/net/dial.go:347\r\nnet.DialTimeout(0x1133ff4, 0x3, 0xc0000ce6f0, 0x10, 0x3b9aca00, 0xc0000ce6f0, 0x10, 0x0, 0x0)\r\n\t/usr/local/go/src/net/dial.go:333 +0xb5\r\nmain.doPortScan(0x10fe540, 0xc0000ce6d4)\r\n\t/Users/mac/go/src/github.com/panjf2000/ants/examples/main.go:42 +0xd8\r\nmain.main.func1(0x10fe540, 0xc0000ce6d4)\r\n\t/Users/mac/go/src/github.com/panjf2000/ants/examples/main.go:90 +0x3e\r\ngithub.com/panjf2000/ants/v2.(*goWorkerWithFunc).run.func1(0xc000255e30)\r\n\t/Users/mac/go/src/github.com/panjf2000/ants/worker_func.go:69 +0xbd\r\ncreated by github.com/panjf2000/ants/v2.(*goWorkerWithFunc).run\r\n\t/Users/mac/go/src/github.com/panjf2000/ants/worker_func.go:49 +0x4c\r\nexit status 2`""",,,DONE,,0,2019-11-13T10:19:02.000+08:00,2019-11-08T11:14:31.000+08:00,2019-11-13T10:19:03.000+08:00,7144,,,0,0,0,gitlab:GithubUser:36106762,pwnfun,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:524118492,https://github.com/panjf2000/ants/issues/59,,59,优先级队列支持,"""**Is your feature request related to a problem? Please describe.**\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n优先级调度。比如除了 Submit 之外，提供 SubmitUrge 接口之类的，提供多优先级调度功能\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\n最简单的办法，可以做三个队列，最高的是 urgent，最低的是 delayed，中间的就是现在的队列。调度策略可以开成 interface 方便定制，简单的策略可以类似于内核 io 调度的 deadline 调度器。\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n只能做多个 pool，但是也不好实现多个 pool 之间的优先级调度。\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n确实有高优先级调度的需求\r\n""",,REQUIREMENT,TODO,,0,,2019-11-18T11:49:17.000+08:00,2021-07-03T16:30:50.000+08:00,0,,,0,0,0,gitlab:GithubUser:8923413,choleraehyq,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:524800426,https://github.com/panjf2000/ants/issues/60,,60,goroutine 不是协程，项目描述不准确。,"""**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\n目前的项目描述里提到，“ ants 是一个高性能且低损耗的 goroutine 协程池。”，这个说法是不正确的，goroutine 不是协程。\r\n\r\n首先，goroutine 不是我们通常说的协作式调度，绝大部分的 go 程序都是没有 runtime.Gosched 的。如果认为 go scheduler 内部的抢占调度目前不完善，那 linux 内核在 2.几 某个版本之前也没有完善的抢占调度，难道 linux 线程也是协程吗。\r\n\r\n另外，预期 Go 1.14 就有完全的抢占调度了，更跟协程不搭边了。\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to '...'\r\n2. Click on '....'\r\n3. Scroll down to '....'\r\n4. See error\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Error messages/Trace logs**\r\nIf applicable, add some logs to help explain your problem.\r\n\r\n**System info (please complete the following information):**\r\n - OS: [e.g. linux, macOS]\r\n - Go Version: [e.g. 1.12]\r\n - ants version: [e.g. v2.2.2]\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n""",,REQUIREMENT,DONE,,0,2019-11-21T12:24:33.000+08:00,2019-11-19T14:21:33.000+08:00,2020-04-07T09:27:12.000+08:00,2763,,,0,0,0,gitlab:GithubUser:8923413,choleraehyq,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:524906588,https://github.com/panjf2000/ants/issues/61,,61,为什么我无法获取到 v2 版本,"""go get -u github.com/panjf2000/ants/v2\r\n\r\n```\r\npackage github.com/panjf2000/ants/v2: cannot find package \""github.com/panjf2000/ants/v2\"" in any of:\r\n        /usr/local/go/src/github.com/panjf2000/ants/v2 (from $GOROOT)\r\n        /Users/xxx/Desktop/go/gin/src/github.com/panjf2000/ants/v2 (from $GOPATH)\r\n\r\n```""",,BUG,DONE,,0,2019-11-19T18:16:01.000+08:00,2019-11-19T18:11:36.000+08:00,2019-11-19T18:16:02.000+08:00,4,,,0,0,0,gitlab:GithubUser:10721527,chinawangyu,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:524907361,https://github.com/panjf2000/ants/issues/62,,62,为什么我无法获取到 v2 版本,"""go get -u github.com/panjf2000/ants/v2\r\n\r\n```\r\npackage github.com/panjf2000/ants/v2: cannot find package \""github.com/panjf2000/ants/v2\"" in any of:\r\n        /usr/local/go/src/github.com/panjf2000/ants/v2 (from $GOROOT)\r\n        /Users/xxx/Desktop/go/gin/src/github.com/panjf2000/ants/v2 (from $GOPATH)\r\n\r\n```""",,,DONE,,0,2019-11-21T12:28:17.000+08:00,2019-11-19T18:12:56.000+08:00,2019-11-21T12:28:17.000+08:00,2535,,,0,0,0,gitlab:GithubUser:10721527,chinawangyu,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:526983024,https://github.com/panjf2000/ants/issues/63,,63,go1.8无法运行benchmark测试,"""你好，我的本地环境和生产环境都是go1.8，目前通过go get会报cannot find package \""github.com/panjf2000/ants/v2/internal”错误，而go1.8还不支持go modules。\r\n想问一下这个代码需要做哪些变动才可以运行在go1.8上呢？你们可以提供支持么？\r\n谢谢~ #62 """,,,DONE,,0,2019-11-23T10:25:15.000+08:00,2019-11-22T12:39:07.000+08:00,2019-11-23T10:25:15.000+08:00,1306,,,0,0,0,gitlab:GithubUser:15848536,Kuching,gitlab:GithubUser:0,,,
gitlab:GithubIssue:731239827,https://github.com/panjf2000/ants/issues/121,,121,有考虑支持动态伸缩池子大小吗？,"""""",,REQUIREMENT,DONE,,0,2020-10-28T17:18:39.000+08:00,2020-10-28T16:54:25.000+08:00,2020-10-28T17:18:39.000+08:00,24,,,0,0,0,gitlab:GithubUser:6133860,jianzhiyao,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:529767734,https://github.com/panjf2000/ants/issues/64,,64,"Hi, boys","""**Is your feature request related to a problem? Please describe.**\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n""",,,DONE,,0,2019-11-28T21:28:37.000+08:00,2019-11-28T16:40:25.000+08:00,2019-11-28T21:28:37.000+08:00,288,,,0,0,0,gitlab:GithubUser:16028668,jjshi,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:529770094,https://github.com/panjf2000/ants/issues/65,,65,internal.NewSpinLock about runtime.Gosched(),"""I see that internal.NewSpinLock() is internal Lock. Why don't use sync.Mutex?\r\nruntime.Gosched() is put current goroutine to global run queue tail.\r\nHope your response.""",,,DONE,,0,2019-12-03T17:19:56.000+08:00,2019-11-28T16:45:36.000+08:00,2020-10-18T22:46:07.000+08:00,7234,,,0,0,0,gitlab:GithubUser:16028668,jjshi,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:530708513,https://github.com/panjf2000/ants/issues/67,,67,增加调试功能,"""**Is your feature request related to a problem? Please describe.**\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n有时任务发生问题，一直不结束或任务太多， 想知道是哪些任务\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\n\r\n增加调试功能， 为 任务增加 任务名，加入时间等信息， 然后 Pool 添加 Stats() []TaskInfo\r\n为 Submit 添加一个些可选项，用户添加任务名，加入时间，\r\nSubmit(cb func(), opts ...TaskOption)\r\n""",,REQUIREMENT,DONE,,0,2019-12-01T21:59:08.000+08:00,2019-12-01T18:25:29.000+08:00,2019-12-01T21:59:08.000+08:00,213,,,0,0,0,gitlab:GithubUser:1052632,runner-mei,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:537859668,https://github.com/panjf2000/ants/issues/68,,68,worker的task问题,"""我初略的看了一下启动的过程，有几个疑问想请教一下\r\n在newpool之后，想要执行任务需要调用pool的submit。在submit里面，有一段代码是w.task <- task.\r\nw是worker的意思，但worker的task chan长度只有1，所以有并发任务来的时候，都在抢占这个w.task。要怎么保证任务的先后顺序的？""",,,DONE,,0,2019-12-14T13:32:54.000+08:00,2019-12-14T11:33:30.000+08:00,2019-12-14T14:05:43.000+08:00,119,,,0,0,0,gitlab:GithubUser:11144120,nagasawaja,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:538994753,https://github.com/panjf2000/ants/issues/69,,69,提两个小需求,"""1. 在批量提交任务后，获取每个任务对应的返回值.\r\n2. 在批量提交任务时，可以携带一个超时参数，表示这批任务执行时，如果超时，则已执行的任务正常返回执行结果，未执行的任务都提前结束（或也返回执行结果，但是标明是timeout）。""",,REQUIREMENT,DONE,,0,2019-12-18T11:54:53.000+08:00,2019-12-17T19:03:45.000+08:00,2021-09-28T16:33:48.000+08:00,1011,,,0,0,0,gitlab:GithubUser:9315278,bglmmz,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:542347075,https://github.com/panjf2000/ants/issues/70,,70,关于retrieveWorker中一小段代码的疑问,"""```go\r\nif n >= 0 {\r\n\t\tw = idleWorkers[n]\r\n\t\tidleWorkers[n] = nil\r\n\t\tp.workers = idleWorkers[:n]\r\n\t\tp.lock.Unlock()\r\n\t} else if p.Running() < p.Cap() {\r\n\t\tp.lock.Unlock()\r\n\t\tspawnWorker()\r\n\t} else {\r\n\t\tif p.nonblocking {\r\n\t\t\tp.lock.Unlock()\r\n\t\t\treturn nil\r\n\t\t}\r\n```\r\n if p.Running() < p.Cap() 判断以后符合条件解锁，再重新创建worker，worker会在run的时候才进行running数的加1会不会有worker在run的时候让出cpu，此时另一个协程执行到p.Running() < p.Cap()判断也符合，从而导致最终的running其实是大于cap的情况呢""",,,DONE,,0,2019-12-26T13:14:15.000+08:00,2019-12-25T22:05:01.000+08:00,2019-12-26T13:14:15.000+08:00,909,,,0,0,0,gitlab:GithubUser:35391181,HobbyBear,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:543230040,https://github.com/panjf2000/ants/issues/71,,71,如何限制httpserver的最大协程数,"""与httpserver集成好像并没能解决内置http包来一个请求开一个goroutine的问题，请问该如何限制内置http包的最大协程数呢？""",,,DONE,,0,2020-01-01T08:19:53.000+08:00,2019-12-29T00:23:21.000+08:00,2020-01-01T08:19:53.000+08:00,4796,,,0,0,0,gitlab:GithubUser:44720525,xuyang404,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:543871027,https://github.com/panjf2000/ants/issues/72,,72,安装v1版本问题？,"""我用go get -u github.com/panjf2000/ants安装后，为啥在pool.go里还有v2的东西？\r\n\""github.com/panjf2000/ants/v2/internal\""\r\n""",,,DONE,,0,2020-01-01T08:19:23.000+08:00,2019-12-30T20:56:57.000+08:00,2020-01-01T08:19:23.000+08:00,2122,,,0,0,0,gitlab:GithubUser:9315278,bglmmz,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:548918163,https://github.com/panjf2000/ants/issues/73,,73,how to wait for completion,"""I need graceful shutdown of my app with ants.PoolWithFunc so i need firstly forbid new tasks, and second wait for completion of already running. How can i do that with ants ?""",,REQUIREMENT,DONE,,0,2020-01-14T00:12:11.000+08:00,2020-01-13T21:08:06.000+08:00,2020-01-14T00:12:12.000+08:00,184,,,0,0,0,gitlab:GithubUser:481307,vtolstov,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:550305777,https://github.com/panjf2000/ants/issues/74,,74,periodicallyPurge可以考虑recover捕获一下panic,"""**What is your question about ants?**\r\nPlease describe your question meticulously.\r\n虽然看了一下这个函数没可能painc,但是开启goroutine不recover让人心慌。\r\n""",,,DONE,,0,2020-01-16T11:19:03.000+08:00,2020-01-16T00:48:32.000+08:00,2020-01-17T00:20:18.000+08:00,630,,,0,0,0,gitlab:GithubUser:31125408,Andrewpqc,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:550555088,https://github.com/panjf2000/ants/issues/75,,75,求教关于 Release 实现的一些疑问,"""release 方法的实现为什么要这样释放内存? \r\n\r\n```golang\r\nfunc (p *PoolWithFunc) Release() {\r\n\tp.once.Do(func() {\r\n\t\tatomic.StoreInt32(&p.release, 1)\r\n\t\tp.lock.Lock()\r\n\t\tidleWorkers := p.workers\r\n\t\tfor i, w := range idleWorkers {\r\n\t\t\tw.args <- nil\r\n\t\t\tidleWorkers[i] = nil\r\n\t\t}\r\n\t\tp.workers = nil\r\n\t\tp.lock.Unlock()\r\n\t})\r\n}\r\n```\r\n直接 p.workers = nil 不能做到释放内存的动作吗？\r\n""",,,DONE,,0,2020-01-16T11:49:30.000+08:00,2020-01-16T11:41:16.000+08:00,2020-01-16T11:49:30.000+08:00,8,,,0,0,0,gitlab:GithubUser:38727061,chengyayu,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:551948830,https://github.com/panjf2000/ants/issues/76,,76,Use pool as a queue,"""**Is your feature request related to a problem? Please describe.**\r\nI have a limited pool (sized pool), but when I reach the capacity of the pool, `Submit()` returns an error (`ErrPoolOverload`) which means the pool is full and no workers available.\r\nEven if i set `Nonblocking` to true in [`Option`].(https://gowalker.org/github.com/panjf2000/ants#Options)\r\n```Go\r\nfunc main() {\r\n\tp, _ := ants.NewPool(2, ants.WithNonblocking(true))\r\n\r\n\tfor i := 0; i < 5; i++ {\r\n\t\terr := p.Submit(func() {\r\n\t\t\tfmt.Println(\""Testing wait for 1 second...\"")\r\n\t\t\ttime.Sleep(1 * time.Second)\r\n\t\t})\r\n\t\tif err != nil {\r\n\t\t\tfmt.Println(\""Error: \"" + err.Error())\r\n\t\t}\r\n\t}\r\n\r\n\ttime.Sleep(500 * time.Second) // Only for test and block main(), something like waitgroup!\r\n}\r\n```\r\nThis code returns:\r\n```\r\nError: too many goroutines blocked on submit or Nonblocking is set\r\nError: too many goroutines blocked on submit or Nonblocking is set\r\nError: too many goroutines blocked on submit or Nonblocking is set\r\nSomething is here, waiting..\r\nSomething is here, waiting..\r\n```\r\n\r\n**Describe the solution you'd like**\r\nI think it's better to have something like a (second) queue in ants. tasks submit without any error and complete one-by-one.\r\nIn other words, `Submit()` should be non-blocking but it shouldn't return `ErrPoolOverload` error even if capacity is full, and should continue receiving tasks.\r\nI'm not sure if this feature exists in ants or not.\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\n`go` keyword can do that:\r\n```Go\r\np, _ := ants.NewPool(2, ants.WithNonblocking(false))\r\n\r\nfor i := 0; i < 5; i++ {\r\n    go p.Submit(func() {\r\n        fmt.Println(\""Testing wait for 1 second...\"")\r\n        time.Sleep(1 * time.Second)\r\n    })\r\n}\r\n```\r\nBut i think there must be a better way.""",,,DONE,,0,2020-04-25T17:39:16.000+08:00,2020-01-20T00:39:17.000+08:00,2020-04-25T17:39:16.000+08:00,139259,,,0,0,0,gitlab:GithubUser:50948745,ffb255,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:553711776,https://github.com/panjf2000/ants/issues/77,,77,如何在ants中接收os.Signal,"""我想要在main中监听os.Signal信号，如果有传入ctrl+c的信号，将会退出所有线程。但是在操作中发现键入ctrl+c后，打印不出来“退出”两个字以及任务结果。。麻烦帮忙看看是哪里不对，谢谢\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\""fmt\""\r\n\t\""github.com/panjf2000/ants/v2\""\r\n\t\""os\""\r\n\t\""os/signal\""\r\n\t\""sync\""\r\n\t\""sync/atomic\""\r\n\t\""syscall\""\r\n\t\""time\""\r\n)\r\n\r\n\r\nvar sum int32\r\nvar results []int32\r\n\r\nfunc myFunc(i interface{}) {\r\n\tn := i.(int32)\r\n\tresults = append(results, n)\r\n\ttime.Sleep(10 * time.Millisecond)\r\n\tatomic.AddInt32(&sum, n)\r\n\tfmt.Printf(\""run with %d\\n\"", n)\r\n}\r\n\r\n\r\nfunc main() {\r\n\tvar wg sync.WaitGroup\r\n\r\n\tp, _ := ants.NewPoolWithFunc(2, func(i interface{}) {\r\n\t\tmyFunc(i)\r\n\t\twg.Done()\r\n\r\n\t})\r\n\r\n\t// Use the common pool.\r\n\tdefer p.Release()\r\n\t// Submit tasks one by one.\r\n\tfor i := 0; i < 1000; i++ {\r\n\t\twg.Add(1)\r\n\t\t_ = p.Invoke(int32(i))\r\n\t}\r\n\t\r\n\t//合建chan\r\n\tc := make(chan os.Signal)\r\n\t//监听指定信号 ctrl+c kill\r\n\tsignal.Notify(c, os.Interrupt, os.Kill)\r\n\tgo func() {\r\n\t\tfor s := range c {\r\n\t\t\tswitch s {\r\n\t\t\tcase syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT:\r\n\t\t\t\tfmt.Println(\""退出\"", s)\r\n\t\t\t\tExitFunc()\r\n\t\t\tdefault:\r\n\t\t\t\tfmt.Println(\""other\"", s)\r\n\t\t\t}\r\n\t\t}\r\n\t}()\r\n\t\r\n\r\n\twg.Wait()\r\n\r\n\tfmt.Printf(\""running goroutines: %d\\n\"", p.Running())\r\n\tfmt.Printf(\""running sum: %d\\n\"", sum)\r\n\tfmt.Printf(\""finish all tasks.\\n\"")\r\n\r\n}\r\n\r\nfunc ExitFunc() {\r\n\tfmt.Println(\""reslut:\"")\r\n\tfmt.Println(results)\r\n\tfmt.Println(\""exit...\"")\r\n}\r\n```\r\n""",,,DONE,,0,2020-01-23T22:43:32.000+08:00,2020-01-23T02:18:13.000+08:00,2020-01-23T22:43:33.000+08:00,1225,,,0,0,0,gitlab:GithubUser:45157320,iiiusky,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:557507246,https://github.com/panjf2000/ants/issues/78,,78,about revertWorker,"""NewPool时，goWorker中的channel大小不需要初始化吗？\r\nworkerCache中task channel的大小设置成1/0有什么考虑么？""",,,DONE,,0,2020-01-31T14:27:05.000+08:00,2020-01-30T21:50:37.000+08:00,2020-01-31T14:29:28.000+08:00,996,,,0,0,0,gitlab:GithubUser:12018707,blacktoot,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:576944665,https://github.com/panjf2000/ants/issues/80,,80,"当大量协程嵌套时,会出现假死状态","""环境:\r\nlinux Centos 6.5\r\ngolang1.13\r\n现象:\r\n1.创建2个pool:p1,p2\r\n2.从chan不断的拿出消息后在p1创建goroutine\r\n3.p1建立goroutine后,在p2生成100个goroutine\r\n4.ants会永远阻塞,并且会超出协程池本身的限制\r\n![image](https://user-images.githubusercontent.com/16916249/76089201-34294400-5ff4-11ea-8722-bf0763ee0168.png)\r\n""",,BUG,DONE,,0,2020-03-09T20:18:09.000+08:00,2020-03-06T21:50:56.000+08:00,2020-03-09T20:18:10.000+08:00,4227,,,0,0,0,gitlab:GithubUser:16916249,arch3754,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:583444295,https://github.com/panjf2000/ants/issues/81,,81,how to pass context and other args in pool_func?,"""hello, @panjf2000  \r\n`func NewPoolWithFunc(size int, pf func(interface{}), options ...Option)`\r\nin NewPoolWithFunc, pf only have an ingerface{}, but i want to pass at least two args, how to solve tihes?\r\n\r\nmy run function like :\r\n```\r\nfunc (s *fileSystemServer) handleOp(\r\n\tc *Connection,\r\n\tctx context.Context,\r\n\top interface{}) {\r\n}\r\n```\r\ncontext is not suggested to put into a struct, how to pass ctx + args as one task to queue?""",,,TODO,,0,,2020-03-18T11:49:05.000+08:00,2021-11-26T20:34:47.000+08:00,0,,,0,0,0,gitlab:GithubUser:24663329,kungf,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:590876739,https://github.com/panjf2000/ants/issues/82,,82,能否中断未执行完成的任务？,"""我创建了一个PoolWithFunc\r\n然后通过一个for循环，用pool.Invoke()来执行任务\r\n我的需求是：我所有的任务有一个统一的deadline，超过就需要让所有任务退出（包括正在执行但是未执行完成，以及还未开始执行的）\r\n\r\n请问，用这个ants能实现这个吗？\r\n\r\n谢谢！""",,,DONE,,0,2020-04-06T22:23:54.000+08:00,2020-03-31T15:47:29.000+08:00,2020-04-06T22:25:18.000+08:00,9036,,,0,0,0,gitlab:GithubUser:9315278,bglmmz,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:598490848,https://github.com/panjf2000/ants/issues/83,,83,为什么不用list作为workerArry 而用切片,"""**What is your question about ants?**\r\nPlease describe your question meticulously.\r\n为什么不用容器封装worker的容器呢""",,,DONE,,0,2020-04-12T23:23:14.000+08:00,2020-04-12T21:57:31.000+08:00,2020-04-12T23:23:14.000+08:00,85,,,0,0,0,gitlab:GithubUser:21356664,zjytra,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:598491535,https://github.com/panjf2000/ants/issues/84,,84,当option.Nonblocking为true,"""**What is your question about ants?**\r\nPlease describe your question meticulously.\r\n当option.Nonblocking为true提交任务的goroutine要一直循环等到到有空闲工作接收才会向后面执行代码哦""",,,DONE,,0,2020-04-12T23:55:35.000+08:00,2020-04-12T22:00:40.000+08:00,2020-04-12T23:55:35.000+08:00,114,,,0,0,0,gitlab:GithubUser:21356664,zjytra,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:598516739,https://github.com/panjf2000/ants/issues/85,,85,pool.Release 不能干掉繁忙的协程哦,"""**What is your question about ants?**\r\nPlease describe your question meticulously.\r\n可以将task设置为接口,pool释放的时候主动通知task 结束 任务，释放协程""",,,DONE,,0,2020-04-13T18:53:23.000+08:00,2020-04-13T00:02:49.000+08:00,2020-04-13T18:53:23.000+08:00,1130,,,0,0,0,gitlab:GithubUser:21356664,zjytra,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1022229785,https://github.com/panjf2000/ants/issues/187,,187,.,"""。""",,,DONE,,0,2021-10-11T12:14:26.000+08:00,2021-10-11T12:01:01.000+08:00,2021-10-11T12:21:40.000+08:00,13,,,0,0,0,gitlab:GithubUser:23187595,zt102545,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:599450188,https://github.com/panjf2000/ants/issues/86,,86,Panic occurred when using nested pools ,"""call chain :\r\n```go\r\npool1:\r\n\tantsP, _ := ants.NewPoolWithFunc(len(block.GetTransactions()), func(params interface{}) {\r\n\t\tsyncVerify1(params) //handle some verify, this func define another ants pool\r\n\t\txxxx\r\n\t})\r\n\tdefer antsP.Release()\r\npool2:\r\n      syncVerify1(params{\r\n            xxxx\r\n           antsP1, _ := ants.NewPoolWithFunc(len(block.GetTransactions()), func(params interface{}) {\r\n\t\tsyncVerify2(params)\r\n\t\txxx\r\n\t})\r\n\tdefer antsP1.Release()//problems happens\r\n      }\r\n```\r\ndebug info like this:\r\n```\r\n2020/04/14 17:50:05 worker with func exits from a panic: runtime error: invalid memory address or nil pointer dereference\r\n2020/04/14 17:50:05 worker with func exits from panic: goroutine 55 [running]:\r\ngithub.com/panjf2000/ants.(*goWorkerWithFunc).run.func1.1(0xc000165b30)\r\n        /data/home/go_workspace/src/trustsql-spv-go/vendor/github.com/panjf2000/ants/worker_func.go:59 +0x140\r\npanic(0xf859e0, 0x18950d0)\r\n        /usr/local/go/src/runtime/panic.go:679 +0x1b2\r\ngithub.com/panjf2000/ants.(*PoolWithFunc).Release(0x0)\r\n        /data/home/go_workspace/src/trustsql-spv-go/vendor/github.com/panjf2000/ants/pool_func.go:221 +0x22\r\ntrustsql-spv-go/validator.Validator.AsyncVerifyBlock(0x0, 0x1, 0xc000196090, 0x25, 0xc00016e4f0, 0xf, 0x1, 0x1, 0x0, 0x0, ...)\r\n        /data/home/go_workspace/src/trustsql-spv-go/validator/validatator.go:113 +0x3b3\r\ntrustsql-spv-go/storage.(*BlocksDaoImpl).AsyncStoreBlocks.func1(0xfbef60, 0xc0001dc6e0)\r\n        /data/home/go_workspace/src/trustsql-spv-go/storage/block_dao_impl.go:163 +0x239\r\ntrustsql-spv-go/storage.(*BlocksDaoImpl).AsyncStoreBlocks.func2(0xfbef60, 0xc0001dc6e0)\r\n        /data/home/go_workspace/src/trustsql-spv-go/storage/block_dao_impl.go:171 +0x42\r\ngithub.com/panjf2000/ants.(*goWorkerWithFunc).run.func1(0xc000165b30)\r\n        /data/home/go_workspace/src/trustsql-spv-go/vendor/github.com/panjf2000/ants/worker_func.go:71 +0xbd\r\ncreated by github.com/panjf2000/ants.(*goWorkerWithFunc).run\r\n        /data/home/go_workspace/src/trustsql-spv-go/vendor/github.com/panjf2000/ants/worker_func.go:49 +0x4c\r\n```""",,BUG,DONE,,0,2020-04-18T13:33:38.000+08:00,2020-04-14T18:05:32.000+08:00,2020-04-18T13:33:38.000+08:00,5488,,,0,0,0,gitlab:GithubUser:5850861,henkgo,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:607208427,https://github.com/panjf2000/ants/issues/88,,88,v2.PoolWithFunc has no field or method Serve,"""I encounter some build problems, hinting \""myPool.Serve undefined (type *v2.PoolWithFunc has no field or method Serve)\""\r\n\r\n```\r\nimport (\r\n\t\""fmt\""\r\n\t\""strconv\""\r\n\t\""time\""\r\n\t\""github.com/panjf2000/ants/v2\""\r\n)\r\n\r\n\r\nvar tunnel = make(chan string, 1)\r\nfunc main() {\r\n\r\n\t//push something to tunnel\r\n\r\n\tmyPool, _ := ants.NewPoolWithFunc(3, Myfunc)\r\n\tdefer myPool.Release()\r\n\r\n\tfor {\r\n\t\tselect {\r\n\t\tcase a := <-tunnel:\r\n\t\t\tgo myPool.Serve(a)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n```\r\n""",,,DONE,,0,2020-04-27T11:50:35.000+08:00,2020-04-27T11:41:29.000+08:00,2020-04-27T17:09:25.000+08:00,9,,,0,0,0,gitlab:GithubUser:8937150,huangp0600,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:613752194,https://github.com/panjf2000/ants/issues/90,,90,支持 unlimited 池子大小,"""**Is your feature request related to a problem? Please describe.**\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n考虑一个情况，当池子运行的函数本身，又需要调用这个池子投放新的任务时，是有死锁的可能的。从使用层面上这个问题很难避免，但是如果池子本身不限制大小，就能避免死锁。\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\n支持不限制池子大小的功能。\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n这很难，需要使用者小心谨慎地使用池子，保证没有同一个池子的嵌套。\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n限制并发数的功能完全可以在上层实现，所以没什么损失。\r\n""",,REQUIREMENT,DONE,,0,2020-05-08T23:32:48.000+08:00,2020-05-07T11:46:20.000+08:00,2020-05-27T22:14:17.000+08:00,2146,,,0,0,0,gitlab:GithubUser:8923413,choleraehyq,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:624852492,https://github.com/panjf2000/ants/issues/92,,92,希望能够支持一个小特性,"""1.  PoolWithFunc希望能够支持任务池的名称；这样一个server存在多个任务池，方便定位问题；\r\n2. PoolWithFunc中的Invoke方法返回error，希望能区分是非阻塞队列任务池满的error msg，还是阻塞队列都满的error msg错误区分，目前笼统地称为：ErrPoolOverload, 这个不太方便定位问题。""",,REQUIREMENT,DONE,,0,2020-05-31T19:29:10.000+08:00,2020-05-26T20:40:35.000+08:00,2020-05-31T19:29:10.000+08:00,7128,,,0,0,0,gitlab:GithubUser:20457624,1046102779,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:624854806,https://github.com/panjf2000/ants/issues/93,,93,使用过程中遇到的一个比较棘手的问题,"""我在使用过程中，如果一个serve部署在异构环境中，可能我设置的任务池大小，就不太适用，要么资源打满，要么资源利用率相对比较低，能根据当前cpu和内存使用情况自动动态的调整任务池大小不？""",,REQUIREMENT,DONE,,0,2020-05-31T19:29:23.000+08:00,2020-05-26T20:44:27.000+08:00,2022-01-14T23:57:03.000+08:00,7124,,,0,0,0,gitlab:GithubUser:20457624,1046102779,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:629156928,https://github.com/panjf2000/ants/issues/95,,95,Ants + fasthttp,"""Hello,\r\n\r\nI am using Ants with fasthttp. Is it possible that this both packages are not compatible? \r\nMy Program fetchs 15000 rows from a MysqlDB and request the HTML code for parse 2 strings out of it. \r\n\r\nMy memory usage is crazy 1,9g with only 434 open socket files = 434 connections (maximum was around 2800):\r\n`15921 jonny     20   0 3093,3m   1,9g   6,9m S   7,3  25,1  11:59.63 goCheckResults`\r\n\r\nroot@jdebian:~$ ls -l /proc/15921/fd | wc -l\r\n`434`\r\n\r\n**in main():**\r\n```go\r\nclient = &fasthttp.Client{\r\n\tReadTimeout:         time.Duration(60) * time.Second,\r\n\tMaxIdleConnDuration: time.Duration(600) * time.Second,\r\n\tDial: func(addr string) (net.Conn, error) {\r\n\t\treturn fasthttp.DialTimeout(addr, time.Duration(60) * time.Second)\r\n\t},\r\n\tTLSConfig: &tls.Config{InsecureSkipVerify: true},\r\n}\r\nvar wg sync.WaitGroup\r\np, _ := ants.NewPoolWithFunc(25, func(i interface{}) {\r\n\tprocessRow(i)\r\n\twg.Done()\r\n})\r\ndefer p.Release()\r\n\r\ni := 0\r\nfor results.Next() {\r\n\tvar current Job\r\n\r\n\terr = results.Scan(&current....)\r\n\r\n\twg.Add(1)\r\n\t_ = p.Invoke(&current)\r\n\ti++\r\n}\r\nwg.Wait()\r\n```\r\n\r\nThe function processRow calls \r\n```go\r\nrow := i.(*Job)\r\n\r\nreq := fasthttp.AcquireRequest()\r\ndefer fasthttp.ReleaseRequest(req)\r\n\r\nreq.SetRequestURI(row.url)\r\nreq.Header.SetMethod(\""GET\"")\r\nreq.Header.Add(\""User-Agent\"", userAgent)\r\n\r\n//println(req.Header.String())\r\n\r\nresp := fasthttp.AcquireResponse()\r\ndefer fasthttp.ReleaseResponse(resp)\r\n\r\n//if err := client.Do(req, resp); err != nil {\r\nif err := client.DoTimeout(req, resp, time.Duration(60) * time.Second); err != nil {\r\n\treturn \""\"", err\r\n}\r\n\r\nbodyBytes := resp.Body()\r\nhtml := string(bodyBytes)\r\n\r\n// parse using regex\r\n// db.Exec (....) <- mysql query to update database\r\n```\r\n\r\nIt is crazy how much memory usage this small program has.""",,,TODO,,0,,2020-06-02T20:18:17.000+08:00,2020-06-06T04:22:07.000+08:00,0,,,0,0,0,gitlab:GithubUser:57217666,T200proX7,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:630445612,https://github.com/panjf2000/ants/issues/96,,96,可以对某个groutine进行操作吗？（比如手动终止某个groutine）,"""""",,,DONE,,0,2020-06-04T18:59:16.000+08:00,2020-06-04T09:42:38.000+08:00,2020-06-04T21:36:33.000+08:00,556,,,0,0,0,gitlab:GithubUser:59554835,resct,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1142268611,https://github.com/panjf2000/ants/issues/213,,213,goWorkerWithFunc:recycleTime is not thread safe,"""**Describe the bug**\r\ngoWorkerWithFunc:recycleTime is not thread safe, it may purge the non-idle goroutine accidently since purgePeriodically read the wrong recycleTime\r\n\r\n**To Reproduce**\r\nit is hard to reproduce in sample code\r\n""",,BUG,TODO,,0,,2022-02-18T11:18:10.000+08:00,2022-03-08T15:12:22.000+08:00,0,,,0,0,0,gitlab:GithubUser:24819147,arrony135,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:638116396,https://github.com/panjf2000/ants/issues/97,,97,SECURITY ERROR: checksum mismatch,"""**Description**\r\nMismatched checksum\r\n\r\n**To Reproduce**\r\nRun `go get https://github.com/panjf2000/ants`\r\n\r\nOr\r\n1. Import `\""github.com/panjf2000/ants\""`\r\n1. Run `go mod vendor`\r\n\r\n**Expected behavior**\r\nSuccessful installation of ants as a vendor/dependency\r\n\r\n**Error messages/Trace logs**\r\ngo get github.com/panjf2000/ants: github.com/panjf2000/ants@v1.2.0: verifying module: checksum mismatch\r\n        downloaded: h1:Ufw4aDz9RqH1RVblx2W9L9Uv5vSX5apbX5+peR7LQ5k=\r\n        sum.golang.org: h1:pMQ1/XpSgnWx3ro4y1xr/uA3jXUsTuAaU3Dm0JjwggE=\r\n\r\n\r\n**System info (please complete the following information):**\r\n - OS: 4.15.0-23-generic #25-Ubuntu\r\n - Go Version: go1.14 linux/amd64\r\n - ants version: v1.2.0\r\n\r\n**Additional context**\r\nSECURITY ERROR\r\nThis download does NOT match the one reported by the checksum server.\r\nThe bits may have been replaced on the origin server, or an attacker may\r\nhave intercepted the download attempt.\r\n""",,BUG,DONE,,0,2020-06-13T18:01:44.000+08:00,2020-06-13T15:45:49.000+08:00,2020-06-13T18:01:44.000+08:00,135,,,0,0,0,gitlab:GithubUser:7106251,navid-kalaei,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:638596333,https://github.com/panjf2000/ants/issues/98,,98,pool.Tune does not take effect if the pool is preallocated,"""Hello,\r\n\r\nMay I know the reason behind the p.options.PreAlloc check? \r\nhttps://github.com/panjf2000/ants/blob/master/pool.go#L173\r\n`if capacity := p.Cap(); capacity == -1 || size <= 0 || size == capacity || p.options.PreAlloc {\r\n\treturn\r\n}`\r\n\r\nWhy can't we tune the pool if it is preallocated?\r\n\r\nThanks.\r\n""",,,DONE,,0,2020-06-21T17:05:37.000+08:00,2020-06-15T14:58:03.000+08:00,2020-06-21T17:05:37.000+08:00,8767,,,0,0,0,gitlab:GithubUser:6374063,giangvu,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:656493889,https://github.com/panjf2000/ants/issues/99,,99,goroutines num 一直上涨,"""本地压测的话,压测的时候,goroutines 会上涨,但是压测结束后,会恢复.\r\n\r\ngo version 1.14.2\r\n使用的 ants 版本是 v2.10(换了高版本v2.40 也有这个问题)\r\n\r\n使用pprof `/debug/pprof/goroutine` 好多这样的文本\r\n```\r\ngoroutine 25824 [chan receive, 21 minutes]:\r\ngithub.com/panjf2000/ants/v2.(*goWorkerWithFunc).run.func1(0xc0011fce70)\r\n\t/www/gopath1.14.2/pkg/mod/github.com/panjf2000/ants/v2@v2.1.0/worker_func.go:65 +0x74\r\ncreated by github.com/panjf2000/ants/v2.(*goWorkerWithFunc).run\r\n\t/www/gopath1.14.2/pkg/mod/github.com/panjf2000/ants/v2@v2.1.0/worker_func.go:49 +0x4c\r\n```\r\n核心的使用代码,每一个请求都会调用 DataQuery 这个函数.\r\n```golang\r\nfunc DataQuery(mobile, id, name string) DataQuerySkeleton {\r\n\tstartTime := 123456789\r\n\tdefer ants.Release()\r\n\tvar wg sync.WaitGroup\r\n\tpUser, _ := ants.NewPoolWithFunc(50, func(para interface{}) {\r\n\t\tfun1(para)\r\n\t\twg.Done()\r\n\t})\r\n\tdefer pUser.Release()\r\n\tqueryInputValue := map[string]string{\r\n\t\tTypeMobile: mobile,\r\n\t\tTypeId:    id,\r\n\t\tTypeName: name,\r\n\t}\r\n\tvar inputUser = make(chan *GoroutineUserInputParaType, 3)\r\n\r\n\tfor k, v := range queryInputValue {\r\n\t\twg.Add(1)\r\n\t\tinPara := &GoroutineUserInputParaType{\r\n\t\t\tUinfoType: k,\r\n\t\t\tUinfoPara: v,\r\n\t\t\tStartTime: 123456789,\r\n\t\t}\r\n\t\tinputUser <- inPara\r\n\t\tpUser.Invoke(inputUser)\r\n\t}\r\n\twg.Wait()\r\n\tclose(inputUser)\r\n\r\n\tfindInfo, minRegisterTime := func3(inputUser)\r\n\ttotalUserNum := len(findInfo)\r\n\tqueryInfo := DataQuerySkeleton{}\r\n\r\n\tif totalUserNum == 0 {\r\n\t\treturn queryInfo\r\n\t}\r\n\tfindOrdersStartTime := 423456789\r\n\tfindUserUsedTime := findOrdersStartTime - startTime\r\n\r\n\tvar inputOrder = make(chan *GoroutineOrderInputParaType, totalUserNum)\r\n\r\n\tpOrder, _ := ants.NewPoolWithFunc(50, func(para interface{}) {\r\n\t\tfun2(para)\r\n\t\twg.Done()\r\n\t})\r\n\tdefer pOrder.Release()\r\n\tfor _, oneUser := range findInfo {\r\n\t\twg.Add(1)\r\n\t\tinPara := &GoroutineOrderInputParaType{\r\n\t\t\tUinfoType: oneUser.Type,\r\n\t\t\tUinfoId:   oneUser.Uinfo.Id,\r\n\t\t\tStartTime: tools.GetUnixMillis(),\r\n\t\t}\r\n\t\tinputOrder <- inPara\r\n\t\tpOrder.Invoke(inputOrder)\r\n\t}\r\n\twg.Wait()\r\n\tclose(inputOrder)\r\n\r\n    ......\r\n\treturn queryInfo\r\n}\r\n```\r\n""",,,DONE,,0,2020-07-14T18:50:32.000+08:00,2020-07-14T18:08:22.000+08:00,2020-07-14T18:50:32.000+08:00,42,,,0,0,0,gitlab:GithubUser:2841874,weichangdong,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:662892614,https://github.com/panjf2000/ants/issues/101,,101,参数动态化,"""执行的func是否可以添加参数动态  例如  ...interface{}""",,REQUIREMENT,DONE,,0,2020-07-24T19:42:48.000+08:00,2020-07-21T19:11:31.000+08:00,2020-07-24T19:42:56.000+08:00,4351,,,0,0,0,gitlab:GithubUser:20257788,tsxylhs,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1101114607,https://github.com/panjf2000/ants/issues/207,,207,"想问一下, 有没有办法固定pool中协程的数量","""**是否支持固定协程池的容量**\r\nPlease describe your question meticulously.\r\n\r\n有的时候不想要给对方增加太多的并发, 比如我有1000个工作需要通过 5个协程来跑.... 刚刚用文档中的例子, 直接1000个协程就怼完了, 担心把server那边怼爆了""",,,DONE,,0,2022-01-13T11:07:59.000+08:00,2022-01-13T11:06:39.000+08:00,2022-01-13T11:07:59.000+08:00,1,,,0,0,0,gitlab:GithubUser:2660914,shoaly,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1103820475,https://github.com/panjf2000/ants/issues/208,,208,请问当ants在执行CPU密集型任务时，调度时能否不打断任务？,"""如果都是`CPU密集型任务`，让任务`无中断`地一直运行是最好的，而Go在1.14引入了`信号抢占机制`，每调用10ms就会打断一次计算，然后进行上下文重加载，再继续执行。在`ants`中，调度`CPU密集型`任务时，能否完全不打断任务？""",,,DONE,,0,2022-01-22T12:58:36.000+08:00,2022-01-14T23:50:07.000+08:00,2022-01-22T22:39:51.000+08:00,10868,,,0,0,0,gitlab:GithubUser:38336731,dragon-zhang,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1108986026,https://github.com/panjf2000/ants/issues/209,,209,请问能否获取每个goroutines的返回值,"""请问能否获取每个goroutines的返回值，我想每次并发使用100个端口，哪个端口空闲了就使用哪个端口，如何才能保证不同时使用到相同的端口\r\n""",,,DONE,,0,2022-03-09T15:11:22.000+08:00,2022-01-20T16:08:49.000+08:00,2022-03-09T15:11:22.000+08:00,69062,,,0,0,0,gitlab:GithubUser:31299839,dream0407,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1127816236,https://github.com/panjf2000/ants/issues/212,,212,`purgePeriodically` function is left running for a while after `pool.Release` is called,"""**Describe the bug**\r\nWhen the `Pool.Release()` function is called, it can leave the `purgePeriodically` function running until its heartbeat `time.Ticker` triggers, at which point the condition on whether the pool is closed is checked by the `purgePeriodically` for loop. \r\n\r\nThe issue is that one cannot assume the goroutines associated with an ant pool are completely cleaned up until the `purgePeriodically` function is completed - and as such, tools like goleak (https://github.com/uber-go/goleak) will report a leaked goroutine in tests. \r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Clone https://github.com/loopholelabs/frisbee\r\n2. Check out the `rpc-async` branch\r\n3. Run `go test ./...`\r\n4. See error\r\n\r\n**Expected behavior**\r\nThe `purgePeriodically` goroutine is closed when the `Release` function returns.\r\n\r\n**Error messages/Trace logs**\r\n```bash\r\ngoleak: Errors on successful test run: found unexpected goroutines:\r\n[Goroutine 4 in state chan receive, with github.com/panjf2000/ants/v2.(*Pool).purgePeriodically on top of the stack:\r\ngoroutine 4 [chan receive]:\r\ngithub.com/panjf2000/ants/v2.(*Pool).purgePeriodically(0x14000140000)\r\n        /Users/shivanshvij/go/pkg/mod/github.com/panjf2000/ants/v2@v2.4.7/pool.go:69 +0x80\r\ncreated by github.com/panjf2000/ants/v2.NewPool\r\n        /Users/shivanshvij/go/pkg/mod/github.com/panjf2000/ants/v2@v2.4.7/pool.go:137 +0x380\r\n]\r\nFAIL    github.com/loopholelabs/frisbee 10.624s\r\n```\r\n\r\n**System info (please complete the following information):**\r\n - OS: macOS\r\n - Go Version: 1.17.6\r\n - ants version: 2.4.7\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n""",,BUG,DONE,,0,2022-03-08T16:30:19.000+08:00,2022-02-09T06:16:27.000+08:00,2022-03-08T16:30:19.000+08:00,39493,,,0,0,0,gitlab:GithubUser:27162109,ShivanshVij,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1174810786,https://github.com/panjf2000/ants/issues/214,,214,any difference between this and https://github.com/bytedance/gopkg/tree/develop/util/gopool,"""any difference between this and https://github.com/bytedance/gopkg/tree/develop/util/gopool?""",,,TODO,,0,,2022-03-21T10:35:20.000+08:00,2022-03-21T10:35:21.000+08:00,0,,,0,0,0,gitlab:GithubUser:51492452,hiqsociety,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1174907155,https://github.com/panjf2000/ants/issues/215,,215,is the latest 1.18 go routine faster than this?,"""is the latest 1.18 go routine faster than this?\r\n\r\njust curious coz it seems faster etc now""",,,TODO,,0,,2022-03-21T13:25:35.000+08:00,2022-03-23T06:39:56.000+08:00,0,,,0,0,0,gitlab:GithubUser:51492452,hiqsociety,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1196996550,https://github.com/panjf2000/ants/issues/217,,217,ants 和 waitgroup一起使用时出现 negative waitGroup counter问题,"""**大致的问题**\r\nants 包和waitgroup一起使用时,出现negative waitGroup导致panic，是个偶先的问题，目前尝试中没有复现问题\r\n\r\n**调用栈信息**\r\n```\r\ngithub.com/panjf2000/ants/v2.(*goWorker).run.func1.1()\r\n        /opt/tiger/compile_path/pkg/mod/github.com/panjf2000/ants/v2@v2.4.8/worker.go:58 +0x10c\r\npanic({0xfcd760, 0x12e6080})\r\n        /usr/local/go/src/runtime/panic.go:1038 +0x215\r\nsync.(*WaitGroup).Add(0x1, 0xc0047b52b8)\r\n        /usr/local/go/src/sync/waitgroup.go:74 +0x105\r\nsync.(*WaitGroup).Done(0xc04451f700)\r\n        /usr/local/go/src/sync/waitgroup.go:99 +0x25\r\nmain.F.func1()\r\n        /opt/tiger/compile_path/src/A/p.go:85 +0x278\r\ngithub.com/panjf2000/ants/v2.(*goWorker).run.func1()\r\n        /opt/tiger/compile_path/pkg/mod/github.com/panjf2000/ants/v2@v2.4.8/worker.go:70 +0x97\r\ncreated by github.com/panjf2000/ants/v2.(*goWorker).run\r\n        /opt/tiger/compile_path/pkg/mod/github.com/panjf2000/ants/v2@v2.4.8/worker.go:48 +0x68\r\n```\r\n\r\n**问题代码**\r\n\r\n```Go\r\npackage main\r\n\r\nimport (\r\n\t\""fmt\""\r\n\t\""github.com/panjf2000/ants/v2\""\r\n\t\""sync\""\r\n)\r\n\r\nfunc main() {\r\n\tres := make([]string, 20)\r\n\tfor i := 0; i < 20; i++ {\r\n\t\tres[i] = \""a\""\r\n\t}\r\n\tids := make([]string, 0)\r\n\ttmp := make([]string, 0)\r\n\tvar w sync.WaitGroup\r\n\tvar mu sync.Mutex\r\n\tfor i, r := range res {\r\n\t\tids = append(ids, r)\r\n\t\tif len(ids) == 2 || i == len(res)-1 {\r\n\t\t\ttt := ids\r\n\t\t\tif err := ants.Submit(func() {\r\n\t\t\t\tdefer w.Done()\r\n\r\n\t\t\t\tmu.Lock()\r\n\t\t\t\tdefer mu.Unlock()\r\n\t\t\t\ttmp = append(tmp, tt...)\r\n\t\t\t});err != nil {\r\n\t\t\t\tfmt.Printf(\""err occur %v\\n\"", err.Error())\r\n\t\t\t} else {\r\n\t\t\t\tw.Add(1)\r\n\t\t\t\tfmt.Printf(\""add 1\\n\"")\r\n\t\t\t}\r\n\t\t\tids = make([]string, 0)\r\n\t\t}\r\n\t}\r\n\tw.Wait()\r\n\tfmt.Println(\""finish\"")\r\n}\r\n\r\n```\r\n\r\n**预期表现**\r\n预期是任务提交成功后，就通过waitGroup的add加一,否则不执行，但任务出现多次done的情况，不清楚原因\r\n""",,BUG,DONE,,0,2022-05-07T22:45:35.000+08:00,2022-04-08T16:17:13.000+08:00,2022-05-07T22:45:35.000+08:00,42148,,,0,0,0,gitlab:GithubUser:38785315,huangketsudou,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1201065478,https://github.com/panjf2000/ants/issues/218,,218,What happens to Routine when it has finished? ,"""Just wondering what happens to a routine that is invoked within an ants pool after it finishes ? \r\n\r\nLet say i set up an ants pool of size 10, and I've invoked 10 routines, so there should be 10 routines running within the pool.\r\nIf 1 routine has finished, is it now 9 routines running? Or are we still left with 10 routine but with 1 inactive ? \r\n\r\nI've setup my application to handle PubSub messages concurrently with each message handled by a function invoked in a worker pool (so 10 messages = 10 Message handler in ants pool). However I want to make sure that the ant pool frees up resources when 1 of the handler finishes. """,,,DONE,,0,2022-04-12T13:50:28.000+08:00,2022-04-12T13:03:29.000+08:00,2022-04-12T13:50:29.000+08:00,46,,,0,0,0,gitlab:GithubUser:77963837,FeurJak,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1206125988,https://github.com/panjf2000/ants/issues/219,,219,公开压测代码,"""可以公开压测的代码？\r\n""",,REQUIREMENT,DONE,,0,2022-05-05T11:25:43.000+08:00,2022-04-16T22:33:56.000+08:00,2022-05-05T11:25:43.000+08:00,26691,,,0,0,0,gitlab:GithubUser:21958683,lockeliu,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1210377843,https://github.com/panjf2000/ants/issues/220,,220,Handling a worker / task that has failed,"""Is there an option to re-invoke worker if it has failed / crashed? Not too sure what WithPanicHandler() does. """,,,DONE,,0,2022-05-07T19:29:32.000+08:00,2022-04-21T09:11:58.000+08:00,2022-05-07T19:29:32.000+08:00,23657,,,0,0,0,gitlab:GithubUser:77963837,FeurJak,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1215362122,https://github.com/panjf2000/ants/issues/222,,222,想知道是你们是怎么做压测的，光看速度的话，我试了一下，还不如原生的,"""```\r\npackage main\r\n\r\nimport (\r\n\t\""fmt\""\r\n\t\""github.com/panjf2000/ants/v2\""\r\n\t\""sync\""\r\n\t\""time\""\r\n)\r\n\r\nvar wg sync.WaitGroup\r\n\r\nfunc main() {\r\n\tf := func() {\r\n\t\twg.Done()\r\n\t}\r\n\trunTimes := 10000000\r\n\tdefer ants.Release()\r\n\tstart := time.Now()\r\n\tfmt.Println(start.Format(\""2006-01-02 15:04:05\""))\r\n\twg.Add(runTimes)\r\n\tfor i := 0; i < runTimes; i++ {\r\n\t\t//ants.Submit(f) // 4.5秒左右\r\n\t\tgo f() //1.6秒左右\r\n\t}\r\n\twg.Wait()\r\n\tfmt.Println(time.Now().Format(\""2006-01-02 15:04:05\""))\r\n\te := time.Since(start)\r\n\tfmt.Println(e.String())\r\n}\r\n```""",,,DONE,,0,2022-05-05T11:25:13.000+08:00,2022-04-26T12:10:53.000+08:00,2022-05-05T11:25:13.000+08:00,12914,,,0,0,0,gitlab:GithubUser:30883503,yxiupei,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1239397157,https://github.com/panjf2000/ants/issues/223,,223,goroutine pool 对性能的影响的疑问,"""在go GMP模型中，数据结构G本身会被go scheduler复用，从内存和性能方面考虑，是不是和goroutine pool中对goroutine的复用效果是一样的呢""",,,DONE,,0,2022-05-18T12:00:54.000+08:00,2022-05-18T12:00:11.000+08:00,2022-05-18T12:00:54.000+08:00,0,,,0,0,0,gitlab:GithubUser:39076288,hugh-404,gitlab:GithubUser:0,,,
gitlab:GithubIssue:1243368453,https://github.com/panjf2000/ants/issues/225,,225,purgePeriodically 导致阻塞,"""最新版的 v2.5.0 release后 仍然 purgePeriodically 循环 导致程序阻塞 ，是我用的不对吗\r\nType: delay\r\nTime: May 21, 2022 at 12:01am (CST)\r\nDuration: 20.02s, Total samples = 40s (199.80%)\r\nEntering interactive mode (type \""help\"" for commands, \""o\"" for options)\r\n(pprof) traces\r\nType: delay\r\nTime: May 21, 2022 at 12:01am (CST)\r\nDuration: 20.02s, Total samples = 40s (199.80%)\r\n-----------+-------------------------------------------------------\r\n       20s   runtime.selectgo\r\n             github.com/panjf2000/ants/v2.(*Pool).purgePeriodically\r\n""",,,TODO,,0,,2022-05-21T00:14:22.000+08:00,2022-05-27T19:11:23.000+08:00,0,,,0,0,0,gitlab:GithubUser:43371021,zqlpaopao,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:675830456,https://github.com/panjf2000/ants/issues/104,,104,"我有个疑问,http本身就是基于goroutine实现吗？ 集成http server 有什么好处，大神们回答下呗","""我有个疑问,http本身就是基于goroutine实现吗？ 集成http server 有什么好处，大神们回答下呗""",,,DONE,,0,2020-08-10T16:37:13.000+08:00,2020-08-10T10:46:29.000+08:00,2020-08-10T16:37:13.000+08:00,350,,,0,0,0,gitlab:GithubUser:24741439,Xuzan9396,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1244030382,https://github.com/panjf2000/ants/issues/226,,226,期望能有 TuneMaxBlockingTasks(size int) 动态调整功能,"""**Is your feature request related to a problem? Please describe.**\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\""github.com/panjf2000/ants/v2\""\r\n)\r\n\r\nvar (\r\n\t// 模拟配置文件\r\n\t// 允许同时处理 10 个任务, 最大再有 80 个任务排队, 若队满就 ErrPoolOverload\r\n\tcapSize  = 10\r\n\tmaxTasks = 80\r\n)\r\n\r\nfunc main() {\r\n\tp, _ := ants.NewPool(capSize, ants.WithMaxBlockingTasks(maxTasks))\r\n\tdefer p.Release()\r\n\t// ...\r\n\r\n\t// 现在配置变化, 期望动态变更\r\n\tcapSize = 20\r\n\tmaxTasks = 150\r\n\r\n\tp.Tune(capSize)\r\n\t// TODO\r\n\tp.TuneMaxBlockingTasks(maxTasks)\r\n}\r\n```\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\n\r\n```go\r\np.TuneMaxBlockingTasks(maxTasks)\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n目前似乎只能以新的 maxTasks 参数新建 pool 来替换. 但要料理旧 pool 未完成的任务.\r\n若有现成方案请指点一下. 谢谢.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n""",,REQUIREMENT,DONE,,0,2022-05-22T18:46:11.000+08:00,2022-05-22T00:39:29.000+08:00,2022-05-22T18:46:11.000+08:00,1086,,,0,0,0,gitlab:GithubUser:4979407,fufuok,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1253913230,https://github.com/panjf2000/ants/issues/227,,227,Performance differences between go1.13 and 1.14 and later versions,"""In the same hardware environment, I found similar results to the author's conclusion for go1.13 in my tests, but for 1.14 onwards, ants no longer has a time consumption advantage, only a memory usage advantage. Is it because version 1.14 implements signal-based scheduling?\r\nAttached are the test results, 3 million times, default pool size\r\n\r\n1.13\r\ngo test -run=\""TestNoPool\"" -v\r\n=== RUN   TestNoPool\r\n--- PASS: TestNoPool (2.64s)\r\n    ants_test.go:47: memory usage:1530 MB\r\nPASS\r\nok      testGo/ant      2.759s\r\n\r\ngo test -run=\""TestAntsPool\"" -v\r\n=== RUN   TestAntsPool\r\n--- PASS: TestAntsPool (1.55s)\r\n    ants_test.go:71: pool, capacity:2147483647\r\n    ants_test.go:72: pool, running workers number:29722\r\n    ants_test.go:73: pool, free workers number:2147453925\r\n    ants_test.go:78: memory usage:73 MB\r\nPASS\r\nok      testGo/ant      1.549s\r\n\r\n\r\n1.14\r\ngo test -run=\""TestNoPool\"" -v\r\n=== RUN   TestNoPool\r\n    TestNoPool: ants_test.go:47: memory usage:289 MB\r\n--- PASS: TestNoPool (0.78s)\r\nPASS\r\nok      testGo/ant      0.783s\r\n\r\ngo test -run=\""TestAntsPool\"" -v\r\n=== RUN   TestAntsPool\r\n    TestAntsPool: ants_test.go:71: pool, capacity:2147483647\r\n    TestAntsPool: ants_test.go:72: pool, running workers number:27475\r\n    TestAntsPool: ants_test.go:73: pool, free workers number:2147456172\r\n    TestAntsPool: ants_test.go:78: memory usage:71 MB\r\n--- PASS: TestAntsPool (1.38s)\r\nPASS\r\nok      testGo/ant      1.385s\r\n\r\n""",,,TODO,,0,,2022-05-31T21:58:47.000+08:00,2022-05-31T21:58:48.000+08:00,0,,,0,0,0,gitlab:GithubUser:29474400,LiaoPuJian,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1257847610,https://github.com/panjf2000/ants/issues/228,,228,golang 1.17.x 版本测试通过了吗？,"""golang 1.17.x 版本能正常使用 ants 吗？是否已经经过测试了。""",,,DONE,,0,2022-06-09T09:42:11.000+08:00,2022-06-02T16:13:04.000+08:00,2022-06-09T09:42:11.000+08:00,9689,,,0,0,0,gitlab:GithubUser:47515663,ZhMaio,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1262980710,https://github.com/panjf2000/ants/issues/229,,229,求问pool中running()方法返回的数字的含义,"""我的代码中有一个生产者，两个消费者。他们分属三个池子。\r\n生产者。读文件，解析对象，根据业务逻辑分别提交给消费者1和消费者2。协程池大小=16.\r\n消费者1。cpu计算。协程池大小=64\r\n消费者2。GPU计算。协程池大小=64\r\n\r\n使用如下方法监听协程池正在运行数量:\r\n`\r\ngo func() {\r\n\t\tfor {\r\n\t\t\ttime.Sleep(time.Duration(1000) * time.Millisecond)\r\n\t\t\tfmt.Println(\r\n\t\t\t\t\""RealCallPool:\"" + strconv.Itoa(RealCallPool.Running()) + \""-\"" + strconv.Itoa(RealCallPool.Waiting()) +\r\n\t\t\t\t\t\""\\tRd2PileupOnGpuPool:\"" + strconv.Itoa(Rd2PileupOnGpuPool.Running()) + \""-\"" + strconv.Itoa(Rd2PileupOnGpuPool.Waiting()) +\r\n\t\t\t\t\t\""\\tRd2pileupOnGoPool:\"" + strconv.Itoa(Rd2pileupOnGoPool.Running()) + \""-\"" + strconv.Itoa(Rd2PileupOnGpuPool.Waiting()))\r\n\t\t}\r\n\t}()\r\n`\r\n\r\n输出的内容:\r\n生产者协程池 ：running=16，waiting=1；稳定不变\r\n消费者1/2，running = 30-64 动态稳定，waiting=0\r\n\r\n我的疑问：\r\n在上述运行状态中，cpu利用率只有30-40核。请问running()和waiting()方法返回的数字的含义。""",,,TODO,,0,,2022-06-07T17:11:46.000+08:00,2022-06-08T19:46:06.000+08:00,0,,,0,0,0,gitlab:GithubUser:48267340,imDpeng,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1264107782,https://github.com/panjf2000/ants/issues/230,,230,How do I get the results of my tasks,"""Hello:)\r\nwhen i use “_ = p.Invoke(task)” , I want to do something while the task is being completed, how do it?\r\n\r\n""",,,TODO,,0,,2022-06-08T10:35:14.000+08:00,2022-06-08T19:43:42.000+08:00,0,,,0,0,0,gitlab:GithubUser:14806824,iGen1us,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:671575307,https://github.com/panjf2000/ants/issues/102,,102,求解：空闲worker回收后，为什么会重新放回sync.Pool中呢,"""作者你好，在阅读源码的时候，遇到了一个问题：\r\n一个goWorker在处理完chan中的task后，会把自身重新放回空闲的workArray中，但同时也放到了workerCache（sync.Pool）中，看了下fasthttp的实现，也做了同样的处理。在代码中我标出了这两处的位置。\r\n\r\n```go\r\nfunc (w *goWorker) run() {\r\n\tw.pool.incRunning()\r\n\tgo func() {\r\n\t\tdefer func() {\r\n\t\t\tw.pool.decRunning()\r\n\t\t\tw.pool.workerCache.Put(w) // 这里放到了cache中\r\n\t\t\tif p := recover(); p != nil {\r\n\t\t\t\tif ph := w.pool.options.PanicHandler; ph != nil {\r\n\t\t\t\t\tph(p)\r\n\t\t\t\t} else {\r\n\t\t\t\t\tw.pool.options.Logger.Printf(\""worker exits from a panic: %v\\n\"", p)\r\n\t\t\t\t\tvar buf [4096]byte\r\n\t\t\t\t\tn := runtime.Stack(buf[:], false)\r\n\t\t\t\t\tw.pool.options.Logger.Printf(\""worker exits from panic: %s\\n\"", string(buf[:n]))\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}()\r\n\r\n\t\tfor f := range w.task {\r\n\t\t\tif f == nil {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tf()\r\n\t\t\tif ok := w.pool.revertWorker(w); !ok {  // 这里把空闲worker放回了workArray中\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t}()\r\n}\r\n```\r\n\r\n由于goWorker是引用，所以同一个goWorker会同时存在于workerArray和sync.Pool中，会不会出现一种情况，从sync.Pool中Get的worker其实在还在有效期中，最终导致goroutine pool中运行的worker数量是”假“的，因为有两个worker是同一个\r\n\r\n这种情况可能需要测试，并行测试较难复现我说的场景，如果您对于这块有比较好的解答，感谢~\r\n\r\n""",,,DONE,,0,2020-08-03T15:22:04.000+08:00,2020-08-02T16:21:16.000+08:00,2020-08-03T15:22:04.000+08:00,1380,,,0,0,0,gitlab:GithubUser:10286120,xieao,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:675845276,https://github.com/panjf2000/ants/issues/105,,105,"疑问？我用NewPoolWithFunc 创建了10个协程去处理，每个goroutine耗时需要1分钟左右,看下我的代码是不是可以这么处理","""#### 疑问？我用NewPoolWithFunc 创建了10个协程去处理，每个goroutine耗时需要1分钟左右，有一种情况，就是我的goroutine 里面可能有超时任务，不释放，我这边想处理2分钟还没结束，就结束掉这个gotoutine， 我这边代码是不是可以这么优化\r\n```\r\n\toptions := ants.Options{}\r\n\toptions.ExpiryDuration = 2 * time.Minute  // 两分钟没处理完结束，释放\r\n\tp, _ := ants.NewPoolWithFunc(10, func(i interface{}) {\r\n\t\t// 一分钟任务\r\n\t\treturn \r\n\t},ants.WithOptions(options))\r\n\tp.Release()\r\n```""",,,DONE,,0,2020-08-10T16:33:18.000+08:00,2020-08-10T11:47:40.000+08:00,2020-08-11T09:19:29.000+08:00,285,,,0,0,0,gitlab:GithubUser:24741439,Xuzan9396,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:683789291,https://github.com/panjf2000/ants/issues/106,,106,怎么样实现先把任务提交再限制池的并发,"""""",,,DONE,,0,2020-08-24T19:15:41.000+08:00,2020-08-22T03:40:47.000+08:00,2020-08-24T19:15:41.000+08:00,3814,,,0,0,0,gitlab:GithubUser:61406754,dukv2001,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:692140116,https://github.com/panjf2000/ants/issues/109,,109,较新版本golang是否还需要ants以及类似的pool实现来替代go？,"""```sh\r\n# go version go1.13.1\r\n\r\nBenchmarkGoroutines-8  3   352026800 ns/op\t   14885 B/op\t      39 allocs/op\r\nBenchmarkAntsPool-8    2   581543800 ns/op\t16137376 B/op\t 1001286 allocs/op\r\n```\r\n\r\n1. 如果上游业务本身并发度较高，直接同步执行task就可以，不需要协程pool\r\n2. 不管上游业务本身并发度是高还是低，如果想要异步task，由于较新版本的go性能和gc都表现的很不错、比pool各方面还算好些，pool与go的主要区别就是协程数量控制，go+rate limit即可，不太需要pool\r\n""",,,DONE,,0,2020-09-08T14:26:02.000+08:00,2020-09-04T01:12:14.000+08:00,2020-09-08T14:26:02.000+08:00,6553,,,0,0,0,gitlab:GithubUser:3296206,cokeboL,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:700343813,https://github.com/panjf2000/ants/issues/110,,110,WithMaxBlockingTasks doesn't seem to work as the docs indicate,"""**Describe the bug**\r\n`WithMaxBlockingTasks` doesn't seem to do what I think it should be doing based on the docs.\r\n\r\n**To Reproduce**\r\n\r\nI expect this to actually error:\r\n```\r\np, _ := ants.NewPool(1, ants.WithMaxBlockingTasks(1))\r\nvar wg sync.WaitGroup\r\nfor i := 0; i < 5; i++ {\r\n  err := p.Submit(func() {\r\n   wg.Add(1)\r\n   time.Sleep(time.Second)\r\n   wg.Done()\r\n  })\r\n  if err != nil {\r\n     // I expect this to have an error if i >= 2\r\n  }\r\n}\r\nwg.Wait()\r\np.Release()\r\n```\r\n\r\n**Expected behavior**\r\nI expect err to return `ants.ErrPoolOverload` when i >= 2.\r\n\r\n**Error messages/Trace logs**\r\nNo error, it processes everything 1 at a time.\r\n\r\n**System info (please complete the following information):**\r\n - OS: macOS\r\n - Go Version: 1.15.1\r\n - ants version: v2.4.2\r\n\r\n""",,,DONE,,0,2020-09-14T02:10:09.000+08:00,2020-09-13T03:11:24.000+08:00,2020-09-14T15:27:28.000+08:00,1378,,,0,0,0,gitlab:GithubUser:2372558,polds,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:719788673,https://github.com/panjf2000/ants/issues/112,,112,想问下本项目在解锁时不用defer语句的原因,"""我阅读了本项目的代码，发现有许多需要解锁的地方没有在defer中进行unlock，而是采取了比较麻烦的——在所有的函数退出点手动unlock。想问下，我们是出于defer的性能问题而放弃了这一写法吗？如果是，在go1.13之后的版本中，defer语句有了比较明显的性能优化，如果是基于1.13之后的版本来开发这一工具，我们的开发者会倾向于选择defer语句中unlock还是手动unlock？""",,,DONE,,0,2020-10-15T01:56:28.000+08:00,2020-10-13T09:51:40.000+08:00,2020-10-15T01:56:28.000+08:00,2404,,,0,0,0,gitlab:GithubUser:25627418,FingalVon,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:719993557,https://github.com/panjf2000/ants/issues/113,,113,[BUG] Memory leak,"""The following is my code causing a memory leak in `ants@v2.4.2`\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\""fmt\""\r\n\t\""net/http\""\r\n\t_ \""net/http/pprof\""\r\n\t\""sync\""\r\n\t\""time\""\r\n\r\n\t\""github.com/panjf2000/ants/v2\""\r\n)\r\n\r\nfunc main() {\r\n\t/**\r\n\tpprof\r\n\thttp://127.0.0.1:6060/debug/pprof/\r\n\t*/\r\n\tgo func() {\r\n\t\t_ = http.ListenAndServe(\""localhost:6060\"", nil)\r\n\t}()\r\n\r\n\tfor k := 0; k < 4; k++ {\r\n\t\tfor i := 0; i < 400; i++ {\r\n\t\t\tgo DoTask()\r\n\t\t\ttime.Sleep(time.Millisecond * 10)\r\n\t\t}\r\n\t\ttime.Sleep(time.Second * 2)\r\n\t}\r\n\tfmt.Println(\""Done\"")\r\n\r\n}\r\n\r\nfunc DoTask() {\r\n\tpool, _ := ants.NewPool(2, ants.WithExpiryDuration(time.Second*2))\r\n\r\n\twg := sync.WaitGroup{}\r\n\r\n\t{\r\n\t\twg.Add(1)\r\n\t\terr := pool.Submit(func() {\r\n\t\t\tdefer wg.Done()\r\n\t\t\ttime.Sleep(time.Millisecond * 10)\r\n\t\t})\r\n\t\tif err != nil {\r\n\t\t\tfmt.Println(err)\r\n\t\t}\r\n\t}\r\n\r\n\t{\r\n\t\twg.Add(1)\r\n\t\terr := pool.Submit(func() {\r\n\t\t\tdefer wg.Done()\r\n\t\t\ttime.Sleep(time.Millisecond * 10)\r\n\t\t})\r\n\t\tif err != nil {\r\n\t\t\tfmt.Println(err)\r\n\t\t}\r\n\t}\r\n\r\n\twg.Wait()\r\n\tpool.Release()\r\n}\r\n\r\n```\r\n\r\n### Timeline\r\n```\r\n------------------------------------------------------------------------------------------\r\nCPU0 revertWorker            -> state closed -> Lock -> reset -> Unlock\r\n------------------------------------------------------------------------------------------\r\nCPU1 Release     -> state ok ->                                         -> Lock -> insert\r\n------------------------------------------------------------------------------------------\r\n```\r\n\r\n### Consider the following:\r\n1. `Pool.revertWorker` starts to execute (`Pool.state` is not `CLOSED`), but `Pool.revertWorker` -> `Pool.lock.Lock` has not yet been called.\r\n2. `Pool.Release` starts to execute (`Pool.state` is `CLOSED`) and `Pool.Release` -> `Pool.lock.Lock` has been called.\r\n3. `Pool.purgePeriodically` would break out of a loop next time.\r\n4. `Pool.Release` -> `p.workers.reset` (clean up all workers in `workerStack.items`).\r\n5. `Pool.revertWorker` -> `p.workers.insert`(add a worker to `workerStack.items`), but this worker would never receive any task, also leading to `goWorker.run` leaks.\r\n\r\nHowever, there may be a race condition between 1 and 2.\r\n\r\n\r\n### Note:\r\nI tried to solve that, it seemed to work.\r\n```\r\n // revertWorker puts a worker back into free pool, recycling the goroutines.\r\n func (p *Pool) revertWorker(worker *goWorker) bool {\r\n-       if capacity := p.Cap(); (capacity > 0 && p.Running() > capacity) || atomic.LoadInt32(&p.state) == CLOSED {\r\n+       if capacity := p.Cap(); capacity > 0 && p.Running() > capacity {\r\n                return false\r\n        }\r\n        worker.recycleTime = time.Now()\r\n        p.lock.Lock()\r\n\r\n+       if atomic.LoadInt32(&p.state) == CLOSED {\r\n+               p.lock.Unlock()\r\n+               return false\r\n+       }\r\n```\r\n\r\n# In Chinese\r\n我们发现`Pool.revertWorker`跟`Pool.Release`存在竞态问题，会导致`goroutine`泄露。\r\n\r\n### Timeline\r\n```\r\n------------------------------------------------------------------------------------------\r\nCPU0 revertWorker            -> state closed -> Lock -> reset -> Unlock\r\n------------------------------------------------------------------------------------------\r\nCPU1 Release     -> state ok ->                                         -> Lock -> insert\r\n------------------------------------------------------------------------------------------\r\n```\r\n\r\n如果`Release`先运行（当前池子状态未关闭往下走等锁），然后`revertWorker`也开始运行了。只要后者比前者先拿到锁`Pool.lock`，就会导致这个worker泄露。\r\n`Release`只会给当时存在池子中的`worker`发`nil`，而这个`worker`肯定没有在池子中；然后`purgePeriodically`也会因为池子关闭而退出循环，后面`worker`过期就没人管了。除此之外好像也没有其他方法可以让泄露的`worker`退出了。\r\n\r\n### Note:\r\n小弟斗胆给大佬您提交一个issue，说的不对的地方还请多多指正，蟹蟹！\r\n想跟您更加深入的讨论一下这个库，方便加下您的微信吗？小弟邮箱cainiao666999@gmail.com，可以的话我来加您😃。""",,BUG,DONE,,0,2020-10-15T11:35:56.000+08:00,2020-10-13T16:20:56.000+08:00,2020-10-15T11:35:56.000+08:00,2595,,,0,0,0,gitlab:GithubUser:29589055,Mutated1994,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:722994544,https://github.com/panjf2000/ants/issues/115,,115,[QUESTION] Excuse me,"""Bro, when will you consider adding a new tag？""",,,DONE,,0,2020-10-16T16:14:51.000+08:00,2020-10-16T15:52:14.000+08:00,2020-10-16T16:14:51.000+08:00,22,,,0,0,0,gitlab:GithubUser:29589055,Mutated1994,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:724008505,https://github.com/panjf2000/ants/issues/116,,116,想请教一下，把互斥锁改成自旋锁的目的是什么呢,"""**What is your question about ants?**\r\nPlease describe your question meticulously.\r\n如题，大概猜测是因为锁保护的代码时间非常短，使用自旋锁能够比互斥锁性能更优？""",,,DONE,,0,2020-10-18T22:46:48.000+08:00,2020-10-18T21:35:14.000+08:00,2020-10-19T00:03:27.000+08:00,71,,,0,0,0,gitlab:GithubUser:7411249,imxyb,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:728597070,https://github.com/panjf2000/ants/issues/118,,118,Does this means we can perform soft-realtime goroutine using this feature like erlang?,"""possible to use ants as a soft-realtime go func() like erlang?\r\n\r\nsorry i hv yet to explore this code in detail but i'm exploring options to make goroutines handle more connections like erlang.""",,,TODO,,0,,2020-10-24T07:26:54.000+08:00,2020-10-24T07:26:54.000+08:00,0,,,0,0,0,gitlab:GithubUser:51514008,gitmko0,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:729205618,https://github.com/panjf2000/ants/issues/119,,119,worker exits from a panic: reflect: call of reflect.Value.Len on ptr Value,"""**worker exits from a panic: reflect: call of reflect.Value.Len on ptr Value**""",,,DONE,,0,2020-11-02T22:02:26.000+08:00,2020-10-26T11:28:28.000+08:00,2020-11-02T22:02:26.000+08:00,10713,,,0,0,0,gitlab:GithubUser:48704159,gdlxSong,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:730161470,https://github.com/panjf2000/ants/issues/120,,120,提交了大量BlockingTasks，当pool.注销时，回收内存比较慢,"""我想知道，怎么自定义回收内存的时间""",,,DONE,,0,2020-10-28T17:20:39.000+08:00,2020-10-27T14:41:08.000+08:00,2020-10-30T17:41:28.000+08:00,1599,,,0,0,0,gitlab:GithubUser:7267234,jiangjiali,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:736200176,https://github.com/panjf2000/ants/issues/122,,122,Some questions about pool.Tune(),"""i use the ants as the pool to control goroutines, and pool.Tune() can  tune pool capacity in runtime, so it is necessary to realize automatic expansion and contraction of pool? Looking forward to your answer, thank you ！\r\n使用了ants作为pool管控goroutine， pool中也提供了一个Tune()方法可以在运行期间调整大小，那么还有必要去实现pool的自动扩缩容吗？期待你的解答，谢谢！""",,,DONE,,0,2020-11-10T10:45:34.000+08:00,2020-11-04T23:20:51.000+08:00,2020-11-10T10:45:34.000+08:00,7884,,,0,0,0,gitlab:GithubUser:42341553,PPeacHH,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:737043014,https://github.com/panjf2000/ants/issues/123,,123,the ants goroutine pool performance ,"""**Why the perf result on my local when using ants goroutines pool doesn't like the benchmark pictures?**\r\nI have cloned the latest code on the master branch and tried to run this command _go test -bench=. -run=none -benchmem=true_ but I got the result quite different from your benchmark pictures, the time of each test loop when using ants pool takes longer.\r\n\r\nHere is the result on my machine:\r\n![image](https://user-images.githubusercontent.com/23579202/98261210-cb490000-1fb6-11eb-95fb-ef28d2227234.png)\r\n\r\nIn the bench tests, I see you're using the ant pool with size 200000 to handle 1000000 tasks, so the result on my machine is what I expected because the size of the ants pool smaller than the number of tasks, so it will save the hardware resources for us but can not be faster than spawning 1000000 goroutines for that job. \r\n\r\nplease correct me. \r\n\r\nHere is the detail of my environment when running the test:\r\n_go version go1.15 darwin/amd64_\r\n`\r\n    Hardware Overview:\r\n\r\n      Processor Name: 6-Core Intel Core i7\r\n      Processor Speed: 2.6 GHz`\r\nOS: macOS catalina""",,,DONE,,0,2020-11-14T10:23:44.000+08:00,2020-11-05T23:41:29.000+08:00,2020-11-22T15:19:49.000+08:00,12162,,,0,0,0,gitlab:GithubUser:23579202,jedrp,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:737434903,https://github.com/panjf2000/ants/issues/124,,124,可以使用全局变量 保存 NewPool么？,"""""",,,DONE,,0,2020-11-12T20:34:23.000+08:00,2020-11-06T11:49:31.000+08:00,2020-11-12T20:34:41.000+08:00,9164,,,0,0,0,gitlab:GithubUser:14883130,foreverZSJ,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:738170151,https://github.com/panjf2000/ants/issues/125,,125,About the memory consumption of pool,"""How much memory per goroutine pool size? Can you please put this on main page?\r\np, _ := ants.NewPool(50000) <- basically goroutine use 2kb / 4kb per go routine\r\n\r\nFrom benchmark, it's 50k pool\r\nhttps://github.com/panjf2000/ants/#-performance-summary\r\ntotal 10M ants instance is 38mb which means each item size is 760bytes with 50000 items.\r\n\r\nis 760bytes the limit for each pool item?\r\n\r\nlast question:\r\npool.Tune(100000) <- May I ask what's the \""optimum size\"" for this? what's a good suggestion / advise on setting size? also on what occasion will u suggest tuning this size? please put the number of bytes each pool is on front page as mentioned so we can calculate and adjust better with your input.""",,,TODO,,0,,2020-11-07T12:40:04.000+08:00,2020-11-07T12:48:39.000+08:00,0,,,0,0,0,gitlab:GithubUser:51514008,gitmko0,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:738173237,https://github.com/panjf2000/ants/issues/126,,126,About the performace when using ants in websocket ,"""Will websocket be written with ants be more performant than using solutions such as gobwas or fastws\r\n\r\nWith reference to go routines being used in websocket here\r\nhttps://www.freecodecamp.org/news/million-websockets-and-go-cc58418460bb/\r\nand also here:\r\nhttps://github.com/dgrr/fastws/\r\n\r\nI havent tried yet but do you think ants with websocket will be faster and more performant than them for high number of connections? e.g. 1M to 10M connections using ants for websocket.""",,,TODO,,0,,2020-11-07T13:02:02.000+08:00,2021-01-11T09:50:12.000+08:00,0,,,0,0,0,gitlab:GithubUser:51514008,gitmko0,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:738174165,https://github.com/panjf2000/ants/issues/127,,127,I just realised your server spec must be very very good,"""For 10M tasks using only 1.3gb, can you put your server spec into front page for your benchmark?\r\nIt seems to be very very good.""",,,TODO,,0,,2020-11-07T13:08:00.000+08:00,2020-11-07T13:08:00.000+08:00,0,,,0,0,0,gitlab:GithubUser:51514008,gitmko0,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:741209727,https://github.com/panjf2000/ants/issues/128,,128,整个项目的核心， 我的理解对不对！,"""\r\n![image](https://user-images.githubusercontent.com/24741439/98886138-674e9c00-24ce-11eb-9303-48ae82158104.png)\r\n\r\n截图所示\r\n## 第一部分是复用 goruntine worker池子， 防止频繁创建，gc 不必要的损耗\r\n## 第二部分是在复用池子的基础上，控制池子的大小\r\n不知道我理解的对不对， 最新对这块性能方面优化挺感兴趣的""",,,DONE,,0,2020-11-14T10:17:22.000+08:00,2020-11-12T10:08:14.000+08:00,2020-11-18T16:15:24.000+08:00,2889,,,0,0,0,gitlab:GithubUser:24741439,Xuzan9396,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:755047477,https://github.com/panjf2000/ants/issues/129,,129,"如果任务卡主了,怎么关闭这个任务","""有没有什么办法主动关闭协程\r\n""",,,DONE,,0,2020-12-05T11:33:10.000+08:00,2020-12-02T16:11:16.000+08:00,2020-12-05T11:33:17.000+08:00,4041,,,0,0,0,gitlab:GithubUser:30611869,lwydyby,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:772339531,https://github.com/panjf2000/ants/issues/130,,130,关于返回值,"""我想知道，我怎样才能获取每个协程的返回值，需要我单独构建一个管道么？另外，我应当如何控制超时？""",,,DONE,,0,2020-12-22T14:43:23.000+08:00,2020-12-22T01:23:50.000+08:00,2020-12-22T14:43:23.000+08:00,799,,,0,0,0,gitlab:GithubUser:17517153,Alberthchang,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:802177721,https://github.com/panjf2000/ants/issues/132,,132,need more examples,"""Is there any repo using ants as an example? \r\nants is an amazing package , though i feel it needs more documentation and examples""",,REQUIREMENT,DONE,,0,2021-05-23T21:34:56.000+08:00,2021-02-05T21:46:12.000+08:00,2021-05-23T21:34:57.000+08:00,154068,,,0,0,0,gitlab:GithubUser:70520127,savixazz,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1024790716,https://github.com/panjf2000/ants/issues/188,,188,"Shopify,Inc is using this project on production, maybe we ad a logo on user case.",null,,,DONE,,0,2021-10-13T21:42:42.000+08:00,2021-10-13T13:07:52.000+08:00,2021-10-13T21:42:42.000+08:00,514,,,0,0,0,gitlab:GithubUser:3814966,lilien1010,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:807765048,https://github.com/panjf2000/ants/issues/133,,133,Any difference between using without modules and v2?,"""I'm using without modules and it works fine. Wondering if there are any benefits to use the v2 version with modules""",,,DONE,,0,2021-03-26T01:11:15.000+08:00,2021-02-13T23:03:51.000+08:00,2021-03-26T01:11:15.000+08:00,57727,,,0,0,0,gitlab:GithubUser:51492452,hiqsociety,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:818082145,https://github.com/panjf2000/ants/issues/134,,134,用vendor怎么下载v2版本？？？,"""老项目用的vendor，暂时用不了gomod，但是现在库里一个包依赖的是v2版本，怎么下载v2的到vendor里呢？""",,,DONE,,0,2021-03-03T14:20:51.000+08:00,2021-02-28T10:39:49.000+08:00,2021-03-03T14:20:51.000+08:00,4541,,,0,0,0,gitlab:GithubUser:25148685,hhyvs111,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:818372401,https://github.com/panjf2000/ants/issues/135,,135,"If ants' goroutine crash, will the whole software crash?","""If ants' goroutine crash, will the whole software crash?\r\n\r\nIf so, how can we make it so that the software will still runs even if crash like erlang processes?""",,,DONE,,0,2021-03-02T00:44:24.000+08:00,2021-03-01T09:10:30.000+08:00,2021-03-02T00:44:24.000+08:00,933,,,0,0,0,gitlab:GithubUser:51492452,hiqsociety,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:821650908,https://github.com/panjf2000/ants/issues/137,,137,"Since we can pool.Tune(), how can we return the current capacity to check if it's worth tuning up or down?","""Since we can pool.Tune(), how can we return the current capacity to check if it's worth tuning up or down?\r\n\r\npossible to do a Capacity()? Does it hv this function already?""",,REQUIREMENT,DONE,,0,2021-03-04T09:04:21.000+08:00,2021-03-04T09:03:06.000+08:00,2021-03-04T09:04:21.000+08:00,1,,,0,0,0,gitlab:GithubUser:51492452,hiqsociety,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:823817947,https://github.com/panjf2000/ants/issues/138,,138,请教下怎么判断每个worker的任务是否执行完毕呢？,"""作者你好，在`README`中，预先知道了需要执行的task个数，利用`sync.WaitGroup`去等待所有的task执行完毕\r\n\r\n想请教下，在预先不知道task个数的情况下，怎么去知道所有的Task都执行完了呢？，伪代码如下:\r\n\r\n```golang\r\n\r\ntype Args struct {\r\n    ID       int\r\n    Name string\r\n}\r\n\r\nfunc Task(args interface{}){\r\n    param := args.(Args)\r\n    fmt.Printf(\""param: %#v\\n\"", param)\r\n}\r\n\r\nfunc main() {\r\n    defer ants.Release()\r\n    \r\n    p, _ = ants.NewPoolWithFunc(10, Task)\r\n    \r\n    defer p.Release()\r\n\r\n    for _, model := range queryResult {    \r\n        args := Args {\r\n             Name: model.Name,\r\n             ID:       model.ID,\r\n        }\r\n        p.Invoke(args)\r\n    }\r\n    //等待所有的Task执行完毕后再结束 ？\r\n}\r\n```\r\n""",,,DONE,,0,2021-03-10T14:05:31.000+08:00,2021-03-07T11:26:03.000+08:00,2021-03-10T14:05:31.000+08:00,4479,,,0,0,0,gitlab:GithubUser:18528873,mayouzi,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:824927472,https://github.com/panjf2000/ants/issues/140,,140,Sitting idle using ants eats up to 5% cpu progressively from time to time,"""Sitting idle using ants eats up to 5% cpu just sitting idle from time to time.\r\n\r\npossible to disable this eating cpu? if idle should not be eating cpu time.""",,REQUIREMENT,DONE,,0,2021-03-28T21:29:40.000+08:00,2021-03-09T04:32:45.000+08:00,2021-03-28T21:29:40.000+08:00,28376,,,0,0,0,gitlab:GithubUser:51492452,hiqsociety,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:830099075,https://github.com/panjf2000/ants/issues/141,,141,retrieveWorker may wait forever,"""1. retrieveWorker will wait when there is no any available work.\r\n2. Then, call Pool.Release(), the state of pool will be changed to CLOSED.\r\n3. All works which are running finish their work, then revertWorker return false, since the state is CLOSED.\r\n4. The tick in purgePeriodically() function will arrive, then break from the for loop, since the state is CLOSED.\r\n\r\nSo, nobody will send the signals to the guys which are waiting in retrieveWorker function.""",,BUG,DONE,,0,2021-03-18T22:01:18.000+08:00,2021-03-12T21:04:12.000+08:00,2021-03-18T22:01:18.000+08:00,8697,,,0,0,0,gitlab:GithubUser:17548688,math345,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:830908542,https://github.com/panjf2000/ants/issues/142,,142,Why not “p.Running()<capacity”？,"""https://github.com/panjf2000/ants/blob/fd8d670fd09489e6ea7693c0a382ba85d2694f16/pool.go#L238\r\n\r\nWhen the worker being executed is less than the capacity, it is already possible not to block, so why wait for all the execution to be completed before you can spawnWorker().\r\nWhy not “p.Running()<capacity”？\r\nI am a newbie and would like to get answers，thanks.\r\n\r\n当正在执行的worker小于容量的时候，就已经可以不用阻塞了，为什么要等待全部执行完了才可以进行spawnWorker()""",,,DONE,,0,2021-03-17T20:54:56.000+08:00,2021-03-13T22:17:59.000+08:00,2021-03-18T09:30:05.000+08:00,5676,,,0,0,0,gitlab:GithubUser:48661001,sirodeneko,gitlab:GithubUser:0,,,
gitlab:GithubIssue:834309657,https://github.com/panjf2000/ants/issues/143,,143,关于 [Issue 142][Why not “p.Running()<capacity”] 的问题,"""\r\n由于 [Issue 142 Why not “p.Running()<capacity”](https://github.com/panjf2000/ants/issues/142) 已经 Closed ，所以我新提交了一个 Issue 。\r\n\r\n这个问题，我想过。我觉得目前的做法不是很优雅。我之前对这段代码进行了一些推敲，我把我的理解整理如下。\r\n\r\n为什么要加下面这段代码呢？而且 p.lock.Unlock() 后再调用 spawnWorker()，running 个数失去了保护，这个次数就有可能超过了设定的最大值 capacity。\r\n\r\n```\r\n\t\tif p.Running() == 0 {\r\n\t\t\tp.lock.Unlock()\r\n\t\t\tspawnWorker()\r\n\t\t\treturn\r\n\t\t}\r\n```\r\n\r\n好吧，我们先忽略上面这个小问题。再来看下面这段代码，为什么不能在 w == nil 时，直接 spawnWorker() 个新的 worker?  因为有可能是收到广播信号，此时不能保证 p.Running() <= capacity 。\r\n\r\n```\r\n\t\tw = p.workers.detach()\r\n\t\tif w == nil {\r\n\t\t\tgoto Reentry\r\n\t\t}\r\n```\r\n\r\n但是，我觉得可以通过修改成下面的代码解决掉这个问题\r\n\r\n```\r\n\t\tw = p.workers.detach()\r\n\t\tif w == nil {\r\n\t\t\tif p.Running() < capacity {\r\n\t\t\t\tspawnWorker()\r\n\t\t\t\tp.lock.Unlock()\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tgoto Reentry\r\n\t\t}\r\n```\r\n\r\n由于作者没有采用类似这样的写法，导致需要增加 `if p.Running() == 0` 这段代码处理广播信号。\r\n\r\n再来看广播信号，广播信号是在定时回收时，满足下面的条件触发的。\r\n\r\n```\r\n\t\t// There might be a situation that all workers have been cleaned up(no any worker is running)\r\n\t\t// while some invokers still get stuck in \""p.cond.Wait()\"",\r\n\t\t// then it ought to wakes all those invokers.\r\n\t\tif p.Running() == 0 {\r\n\t\t\tp.cond.Broadcast()\r\n\t\t}\r\n```\r\n\r\n为什么需要这段代码？原因在于需要考虑这么一种情况，当 retrieveWorker() 发现 runing() 个数超过了容量，因此在 p.cond.Wait() 中。之后 runing() 的所有 worker f() 都发生了 panic，按当前的代码逻辑，是无法正常归还到工作池中的，revertWorker 不会被调用，也就是 revertWorker 不会发出 Signal 通知。因此，如果我们检测到没有1个worker running，就 Broadcast 信号。\r\n\r\n```\r\nfor f := range w.task {\r\n\t\r\n\tif f == nil {\r\n\t\treturn\r\n\t}\r\n\t\r\n\t// 需要考虑 f() panic 的情况，此时不会归还到工作池中\r\n\tf()\r\n\t\r\n\tif ok := w.pool.revertWorker(w); !ok {\r\n\t\treturn\r\n\t}\r\n}\r\n```\r\n\r\n因此广播信号的加入，确实增加了复杂度。能不能在work run() 中包装调用 f() ，处理 panic ?""",,REQUIREMENT,TODO,,0,,2021-03-18T09:36:19.000+08:00,2021-08-30T12:06:42.000+08:00,0,,,0,0,0,gitlab:GithubUser:17548688,math345,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:837779470,https://github.com/panjf2000/ants/issues/144,,144,"Out-of-date README, misleading terminology and stale description on high performance ","""Thanks for your great job on the project. \r\n\r\nI have some questions:\r\n1. out-of-date image and code\r\n The image [10M tasks](https://github.com/panjf2000/ants#10m-tasks) is a misused or stale image. The bench function it called is not the same as [1M tasks](https://github.com/panjf2000/ants#1m-tasks) and [100k tasks](https://github.com/panjf2000/ants#100k-tasks). It is partly the same as the pic [benchmarks-with-poolwithfunc](https://github.com/panjf2000/ants#benchmarks-with-poolwithfunc) above.\r\n And I didn't see the bench function it called ,naming \""BenchmarkGoroutineWithFunc\"",\""BenchmarkAntsPoolWithFunc\"", exists in the source code. Maybe it has already been removed from the src, or changed to \""^TestAntsPoolWithFunc...\""\r\n\r\n2. About throughput and latency\r\n In [here](https://github.com/panjf2000/ants#throughput-it-is-suitable-for-scenarios-where-tasks-are-submitted-asynchronously-without-waiting-for-the-final-results), you describe the result as a kind of throughput,but maybe it should be more like a one-way latency (you just commit the job,and never wait it to be done)\r\n Throughput should be calculated like  [here](https://github.com/panjf2000/ants/blob/master/ants_benchmark_test.go#L64) , using wg.Wait() to get the total elapsed time t, and divide it to the number of goroutines committed, e.g.\"" t / #goroutine \""\r\n That's a clear question when facing pipeline.\r\n The Image [performance-summary](https://github.com/panjf2000/ants#-performance-summary) uses \""Goroutine throughput benchmark\"" as its title, but using memory and latency as its y-label, which is confusing. Maybe \""throughput\"" should be removed\r\n\r\n3. About the performance,I tried to run the bench for more than 3 times, and got the following results.\r\nThe results seem to be very different from the bench in your [README](https://github.com/panjf2000/ants#benchmarks-with-pool)\r\n\r\nAbout my machine&env:\r\n```\r\nIntel(R) Core(TM) i5-8250U CPU @ 1.60GHz\r\n\r\ngo version go1.16.2 windows/amd64\r\n```\r\n\r\n3.1 Using Test\r\nThe only quoted variable `n` has been set to ` n        = 10000000 `, e.g. 10M\r\nIt seems that TestAntsPool runs slower than TestNoPool, though the memory saved is obviously huge.\r\n\r\n```sh\r\nPS D:\\go-work\\src\\github.com\\panjf2000\\ants> go test -run=NoPool -v\r\n=== RUN   TestNoPool\r\n    ants_test.go:210: memory usage:789 MB\r\n--- PASS: TestNoPool (5.04s)\r\nPASS\r\nok      github.com/panjf2000/ants/v2    5.154s\r\n\r\nPS D:\\go-work\\src\\github.com\\panjf2000\\ants> go test -run=\""AntsPool$\"" -v\r\n=== RUN   TestAntsPool\r\n    ants_test.go:225: pool, capacity:2147483647\r\n    ants_test.go:226: pool, running workers number:19360\r\n    ants_test.go:227: pool, free workers number:2147464287\r\n    ants_test.go:232: memory usage:184 MB\r\n--- PASS: TestAntsPool (7.41s)\r\nPASS\r\nok      github.com/panjf2000/ants/v2    7.528s\r\n```\r\n\r\n3.2 Using Benchmark\r\nI first set the param to 1M tasks and 50k pool capacity,just like what you set in [README](https://github.com/panjf2000/ants#-benchmarks)\r\nHere the performance is significantly higher than \""without pool\""\r\n```sh\r\nRunning tool: D:\\GO\\bin\\go.exe test -benchmem -run=^$ -bench ^(BenchmarkGoroutines)$ github.com/panjf2000/ants/v2\r\n\r\ngoos: windows\r\ngoarch: amd64\r\npkg: github.com/panjf2000/ants/v2\r\ncpu: Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz\r\nBenchmarkGoroutines-8   \t       1\t10773745800 ns/op\t509732352 B/op\t 1996637 allocs/op\r\nPASS\r\nok  \tgithub.com/panjf2000/ants/v2\t11.616s\r\n\r\nRunning tool: D:\\GO\\bin\\go.exe test -benchmem -run=^$ -bench ^(BenchmarkAntsPool)$ github.com/panjf2000/ants/v2\r\n\r\ngoos: windows\r\ngoarch: amd64\r\npkg: github.com/panjf2000/ants/v2\r\ncpu: Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz\r\nBenchmarkAntsPool-8   \t       2\t 712292750 ns/op\t21032456 B/op\t 1063341 allocs/op\r\nPASS\r\nok  \tgithub.com/panjf2000/ants/v2\t2.363s\r\n```\r\nIt is weird for me to see the different result, given the src code is nearly the same.\r\n\r\n4. Is it OK to use a [only sleep function](https://github.com/panjf2000/ants/blob/master/ants_benchmark_test.go#L39) acting as worker?\r\nMaybe changing the demoFunc to a CPU-bound func like the following, or a related compromise.\r\n```go\r\n// func demoFunc() {\r\n// \ttime.Sleep(time.Duration(BenchParam) * time.Millisecond)\r\n// }\r\nfunc demoFunc() {\r\n\tbegin := time.Now()\r\n\ti := 0\r\n\tfor {\r\n\t\ti++\r\n\t\tend := time.Now()\r\n\t\tif end.UnixNano()-begin.UnixNano() > int64(time.Millisecond)*BenchParam {\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n5. However, in this [issue](https://github.com/panjf2000/ants/issues/123), you admit that the performance isn't higher than the plain goroutine anymore. Please UPDATE THE README!\r\n\r\nIf I have any error,correct me plz. That's my pleasure to see such an awesome project in saving memory alloction, avoiding unlimited goroutine constructions.\r\n\r\n\r\n""",,,DONE,,0,2021-06-29T15:33:58.000+08:00,2021-03-22T22:34:21.000+08:00,2021-06-29T15:33:58.000+08:00,142139,,,0,0,0,gitlab:GithubUser:49816514,wymli,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:838523489,https://github.com/panjf2000/ants/issues/145,,145,协程性能,"""目前我用ants作为协程池处理并发请求, 发现协程的延迟有80~100us,  和我直接用go func的延迟差别不大. \r\n由于我的请求本身延迟大概500-600us, 协程的延迟比较影响性能\r\n请问有什么可以改善的吗\r\n""",,,DONE,,0,2021-05-23T14:50:35.000+08:00,2021-03-23T17:28:13.000+08:00,2021-05-23T14:50:35.000+08:00,87682,,,0,0,0,gitlab:GithubUser:75625523,cham-pin,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1025263959,https://github.com/panjf2000/ants/issues/190,,190,Pause API is needed in some scenario,"""in our case, we need a `pool.Pause()` to  pause all jobs, and  use `pool.Resume()` to restart the jobs.""",,REQUIREMENT,TODO,,0,,2021-10-13T21:37:28.000+08:00,2022-03-23T06:43:23.000+08:00,0,,,0,0,0,gitlab:GithubUser:3814966,lilien1010,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:840918413,https://github.com/panjf2000/ants/issues/146,,146,所有 workers 发生 panic 导致那些正在等待可用 worker 的调用方阻塞住,"""**Describe the bug**\r\n极端情况下，协程的执行速度为`ExpiryDuration`的时长\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. 创建一个`size`为1，`ExpiryDuration`为10s的协程池\r\n2. 创建一个每次必panic的函数`panicFunc`\r\n3. 向协程池添加5次`panicFunc`任务，并且后续不会再添加新的任务\r\n4. 结果每`10s`(也就是设定的`ExpiryDuration`的时长)才会打印一次panic堆栈\r\n\r\n代码如下：\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\""fmt\""\r\n\t\""sync\""\r\n\t\""time\""\r\n\r\n\t\""github.com/panjf2000/ants/v2\""\r\n)\r\n\r\nfunc main() {\r\n\trunTimes := 5\r\n\tvar wg sync.WaitGroup\r\n\tpool, _ := ants.NewPool(1, ants.WithExpiryDuration(10 * time.Second))\r\n\tpanicFunc := func() {\r\n\t\ttime.Sleep(10 * time.Millisecond)\r\n\t\twg.Done()\r\n\t\tpanic(\""test panic\"")\r\n\t}\r\n\tfor i := 0; i < runTimes; i++ {\r\n\t\twg.Add(1)\r\n\t\t_ = pool.Submit(panicFunc)\r\n\t}\r\n\twg.Wait()\r\n\tfmt.Printf(\""running goroutines: %d\\n\"", pool.Running())\r\n}\r\n\r\n```\r\n**Expected behavior**\r\n5次`panic`应该堆栈很快就打印完\r\n\r\n**Error messages/Trace logs**\r\n```cmd\r\n2021/03/25 21:10:15 worker exits from a panic: test panic\r\n2021/03/25 21:10:15 worker exits from panic: goroutine 8 [running]:\r\ngithub.com/panjf2000/ants/v2.(*goWorker).run.func1.1(0xc000072180)\r\n        /Users/admin/dev/ginlearn/ants/worker.go:58 +0x161\r\npanic(0x10b2d60, 0x10f3fa0)\r\n        /usr/local/opt/go@1.13/libexec/src/runtime/panic.go:679 +0x1b2\r\nmain.main.func1()\r\n        /Users/admin/dev/ginlearn/ants/examples/test_panic/main.go:18 +0x67\r\ngithub.com/panjf2000/ants/v2.(*goWorker).run.func1(0xc000072180)\r\n        /Users/admin/dev/ginlearn/ants/worker.go:68 +0xa5\r\ncreated by github.com/panjf2000/ants/v2.(*goWorker).run\r\n        /Users/admin/dev/ginlearn/ants/worker.go:48 +0x4c\r\n\r\n2021/03/25 21:10:25 worker exits from a panic: test panic\r\n2021/03/25 21:10:25 worker exits from panic: goroutine 18 [running]:\r\ngithub.com/panjf2000/ants/v2.(*goWorker).run.func1.1(0xc0000c8000)\r\n        /Users/admin/dev/ginlearn/ants/worker.go:58 +0x161\r\npanic(0x10b2d60, 0x10f3fa0)\r\n        /usr/local/opt/go@1.13/libexec/src/runtime/panic.go:679 +0x1b2\r\nmain.main.func1()\r\n        /Users/admin/dev/ginlearn/ants/examples/test_panic/main.go:18 +0x67\r\ngithub.com/panjf2000/ants/v2.(*goWorker).run.func1(0xc0000c8000)\r\n        /Users/admin/dev/ginlearn/ants/worker.go:68 +0xa5\r\ncreated by github.com/panjf2000/ants/v2.(*goWorker).run\r\n        /Users/admin/dev/ginlearn/ants/worker.go:48 +0x4c\r\n\r\n2021/03/25 21:10:35 worker exits from a panic: test panic\r\n2021/03/25 21:10:35 worker exits from panic: goroutine 33 [running]:\r\ngithub.com/panjf2000/ants/v2.(*goWorker).run.func1.1(0xc0000e6000)\r\n        /Users/admin/dev/ginlearn/ants/worker.go:58 +0x161\r\npanic(0x10b2d60, 0x10f3fa0)\r\n        /usr/local/opt/go@1.13/libexec/src/runtime/panic.go:679 +0x1b2\r\nmain.main.func1()\r\n        /Users/admin/dev/ginlearn/ants/examples/test_panic/main.go:18 +0x67\r\ngithub.com/panjf2000/ants/v2.(*goWorker).run.func1(0xc0000e6000)\r\n        /Users/admin/dev/ginlearn/ants/worker.go:68 +0xa5\r\ncreated by github.com/panjf2000/ants/v2.(*goWorker).run\r\n        /Users/admin/dev/ginlearn/ants/worker.go:48 +0x4c\r\n\r\n2021/03/25 21:10:45 worker exits from a panic: test panic\r\n2021/03/25 21:10:45 worker exits from panic: goroutine 49 [running]:\r\ngithub.com/panjf2000/ants/v2.(*goWorker).run.func1.1(0xc000072180)\r\n        /Users/admin/dev/ginlearn/ants/worker.go:58 +0x161\r\npanic(0x10b2d60, 0x10f3fa0)\r\n        /usr/local/opt/go@1.13/libexec/src/runtime/panic.go:679 +0x1b2\r\nmain.main.func1()\r\n        /Users/admin/dev/ginlearn/ants/examples/test_panic/main.go:18 +0x67\r\ngithub.com/panjf2000/ants/v2.(*goWorker).run.func1(0xc000072180)\r\n        /Users/admin/dev/ginlearn/ants/worker.go:68 +0xa5\r\ncreated by github.com/panjf2000/ants/v2.(*goWorker).run\r\n        /Users/admin/dev/ginlearn/ants/worker.go:48 +0x4c\r\n\r\n2021/03/25 21:10:55 worker exits from a panic: test panic\r\n2021/03/25 21:10:55 worker exits from panic: goroutine 51 [running]:\r\ngithub.com/panjf2000/ants/v2.(*goWorker).run.func1.1(0xc0000e6000)\r\n        /Users/admin/dev/ginlearn/ants/worker.go:58 +0x161\r\npanic(0x10b2d60, 0x10f3fa0)\r\n        /usr/local/opt/go@1.13/libexec/src/runtime/panic.go:679 +0x1b2\r\nmain.main.func1()\r\n        /Users/admin/dev/ginlearn/ants/examples/test_panic/main.go:18 +0x67\r\ngithub.com/panjf2000/ants/v2.(*goWorker).run.func1(0xc0000e6000)\r\n        /Users/admin/dev/ginlearn/ants/worker.go:68 +0xa5\r\ncreated by github.com/panjf2000/ants/v2.(*goWorker).run\r\n        /Users/admin/dev/ginlearn/ants/worker.go:48 +0x4c\r\n\r\nrunning goroutines: 0\r\n\r\n```\r\n**System info (please complete the following information):**\r\n - OS:  macOS 11.2.3\r\n - Go Version: go1.13.15 darwin/amd64\r\n - ants version: v2.4.3\r\n\r\n**Additional context**\r\n感觉这种情况很极端，生产环境中几乎不会存在，不知有没有修复的必要。""",,BUG,DONE,,0,2021-03-28T22:38:11.000+08:00,2021-03-25T21:17:49.000+08:00,2021-03-28T22:39:24.000+08:00,4400,,,0,0,0,gitlab:GithubUser:38038921,shangxiaomi,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:841138037,https://github.com/panjf2000/ants/issues/147,,147,Crash with bbolt db.Batch after running for some time,"""long running program crash here\r\n\r\n        putDB := func() {\r\n                db.Batch(func(tx *bbolt.Tx) error {\r\n                 \r\n\r\n                \r\n                })\r\n        }\r\n\r\n\r\nants.Submit(putDB) <-- pseudocode\r\n\r\n\r\n\r\n\r\ngoroutine 1225 [chan receive]:\r\nbbolt.(*DB).Batch(0xc0001a6800, 0xc000096200, 0xc0005d6a80, 0xc0007b37a8)\r\n\r\n\r\n\r\n\r\n\r\n        /go/pkg/mod/github.com/panjf2000/ants/v2@v2.4.3/worker.go:68 +0x94\r\ncreated by github.com/panjf2000/ants/v2.(*goWorker).run\r\n        /go/pkg/mod/github.com/panjf2000/ants/v2@v2.4.3/worker.go:48 +0x4c\r\n\r\ngoroutine 1295 [chan receive]:\r\ngithub.com/panjf2000/ants/v2.(*goWorker).run.func1(0xc0006230e0)\r\n        /go/pkg/mod/github.com/panjf2000/ants/v2@v2.4.3/worker.go:64 +0x75\r\ncreated by github.com/panjf2000/ants/v2.(*goWorker).run\r\n        /go/pkg/mod/github.com/panjf2000/ants/v2@v2.4.3/worker.go:48 +0x4c\r\n\r\ngoroutine 1296 [chan receive]:\r\ngithub.com/panjf2000/ants/v2.(*goWorker).run.func1(0xc000623110)\r\n        /go/pkg/mod/github.com/panjf2000/ants/v2@v2.4.3/worker.go:64 +0x75\r\ncreated by github.com/panjf2000/ants/v2.(*goWorker).run\r\n        /go/pkg/mod/github.com/panjf2000/ants/v2@v2.4.3/worker.go:48 +0x4c\r\n\r\nrax    0x0\r\nrbx    0x7f578b4f9700\r\nrcx    0x7f57c60ef18b\r\nrdx    0x0\r\nrdi    0x2\r\nrsi    0x7f578b4f8a10\r\nrbp    0x7f57c6264588\r\nrsp    0x7f578b4f8a10\r\nr8     0x0\r\nr9     0x7f578b4f8a10\r\nr10    0x8\r\nr11    0x246\r\nr12    0x7f57c62b35fa\r\nr13    0x1a7\r\nr14    0x7f57c62b3530\r\nr15    0x2978710\r\nrip    0x7f57c60ef18b\r\nrflags 0x246\r\ncs     0x33\r\nfs     0x0\r\ngs     0x0""",,BUG,DONE,,0,2021-03-28T22:40:00.000+08:00,2021-03-26T01:10:12.000+08:00,2021-03-28T22:40:00.000+08:00,4169,,,0,0,0,gitlab:GithubUser:51492452,hiqsociety,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:844010065,https://github.com/panjf2000/ants/issues/148,,148,A proper way of using `sync.Cond`,"""Hello, there! I'd like to say this package shows great work!\r\n\r\nAccording to the doc comments in [go pkg](https://golang.org/pkg/sync/#Cond), I doubt whether this is a proper way of using conditional variable, since I see no `p.cond.L.Lock()` before calling `p.cond.Wait()`. I haven't make any test, but won't be a problem there?\r\n\r\nhttps://github.com/panjf2000/ants/blob/dbcb6a104f23b1a6a7521796b30515230353283e/pool.go#L244""",,,DONE,,0,2021-03-30T10:51:39.000+08:00,2021-03-30T10:48:12.000+08:00,2021-03-30T10:56:23.000+08:00,3,,,0,0,0,gitlab:GithubUser:37577088,fangxlmr,gitlab:GithubUser:0,,,
gitlab:GithubIssue:851256703,https://github.com/panjf2000/ants/issues/150,,150,Why delete tag v1.3.0?,"""**What is your question about ants?**\r\nPlease describe your question meticulously.\r\n\r\nWhy delete tag v1.3.0?""",,,DONE,,0,2021-04-08T18:08:10.000+08:00,2021-04-06T17:52:27.000+08:00,2021-04-08T18:08:10.000+08:00,2895,,,0,0,0,gitlab:GithubUser:4394982,deliangyang,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:857977427,https://github.com/panjf2000/ants/issues/151,,151,how do u pass value like goroutine?,"""e.g.\r\n\r\nfor i:=0; i<10000; i++ {\r\ngo func(abc uint64) {\r\n\r\n}(i)\r\n}\r\n\r\nhow do u do the same with ants?""",,,DONE,,0,2021-04-14T22:57:13.000+08:00,2021-04-14T22:51:13.000+08:00,2021-04-14T22:57:13.000+08:00,6,,,0,0,0,gitlab:GithubUser:51492452,hiqsociety,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:863400810,https://github.com/panjf2000/ants/issues/152,,152,Doubt about Pool.Free() / 关于 Pool.Free() 的一些疑惑,"""I need to know whether the goroutine pool is \""full\""(blocked in `Pool.Submit()`), and I found this function `Pool.Free()`, but I'm really confused about its behavior. \r\n```\r\n// Free returns the available goroutines to work.\r\nfunc (p *Pool) Free() int {\r\n\treturn p.Cap() - p.Running()\r\n}\r\n```\r\nas you commented, it returns the avaliable goroutines, but when you created a pool with a size of -1, you will get a negative  number. So only when `Pool.Free()` returns exactly zero, can I know that the pool is \""full\"", right?\r\n\r\n\r\n我想通过知道 goroutine 池是否已经满了（提交任务 `Pool.Submit()` 时阻塞），我找到了这个函数 `Pool.Free()`，但我对其行为有一些疑问。\r\n```\r\n// Free returns the available goroutines to work.\r\nfunc (p *Pool) Free() int {\r\n\treturn p.Cap() - p.Running()\r\n}\r\n```\r\n正如你所评论的，它返回可用的goroutine，但是当你创建一个大小为 -1 的池时，你将得到一个负数。所以只有当 `Pool.Free()` 正好返回 0 时，我才能知道池已满，对吗？\r\n""",,,DONE,,0,2021-04-27T08:17:09.000+08:00,2021-04-21T10:55:09.000+08:00,2021-04-27T08:17:09.000+08:00,8482,,,0,0,0,gitlab:GithubUser:34428640,ycydsxy,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:864353725,https://github.com/panjf2000/ants/issues/153,,153,Nested ants function gives error for long running fast for loops?,"""Getting error of \r\n\r\n2021/04/21 22:28:03 worker exits from a panic: runtime error: invalid memory address or nil pointer dereference\r\n2021/04/21 22:28:03 worker exits from panic: goroutine 23634 [running]:\r\ngithub.com/panjf2000/ants/v2.(*goWorker).run.func1.1(0xc004b7ae70)\r\n        /go/pkg/mod/github.com/panjf2000/ants/v2@v2.4.4/worker.go:58 +0x17c\r\npanic(0x68dc60, 0x9d0eb0)\r\n        /usr/lib/go-1.16/src/runtime/panic.go:965 +0x1b9\r\n\r\n\r\nif nested multi layer. is this a problem?""",,,DONE,,0,2021-05-23T14:50:27.000+08:00,2021-04-22T06:29:50.000+08:00,2021-05-23T14:50:27.000+08:00,45140,,,0,0,0,gitlab:GithubUser:51492452,hiqsociety,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1028877423,https://github.com/panjf2000/ants/issues/191,,191,自旋锁的性能对比测试,"""![1634552555(1)](https://user-images.githubusercontent.com/22676124/137714133-c424b7b5-de1a-41af-bc1d-ee633edba695.png)\r\n\r\n\r\n\r\n测试案例代码 \r\nhttps://github.com/liu-song/ants/blob/master/internal/spinlock_test.go\r\n """,,,DONE,,0,2021-11-27T21:45:03.000+08:00,2021-10-18T17:37:35.000+08:00,2021-11-27T21:45:03.000+08:00,57847,,,0,0,0,gitlab:GithubUser:22676124,liu-song,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:869939645,https://github.com/panjf2000/ants/issues/154,,154,retrieveWorker时候p.Running()边界问题,"""```go\r\nspawnWorker := func() {\r\n\t\tw = p.workerCache.Get().(*goWorker)\r\n\t\tw.run()\r\n\t}\r\n\r\n\tp.lock.Lock()\r\n\r\n\tw = p.workers.detach()\r\n\tif w != nil {\r\n\t\tp.lock.Unlock()\r\n\t} else if capacity := p.Cap(); capacity == -1 || capacity > p.Running() {\r\n\t\tp.lock.Unlock()\r\n\t\tspawnWorker()\r\n```\r\np.Running取出后判断小于capacity，解锁，再增加一个worker，是否存在边界问题？\r\n在incrRunning()前，有其他协程也取到了同样的p.Running()，是否存在最后协程数超过capacity?\r\n""",,,DONE,,0,2021-05-10T20:42:43.000+08:00,2021-04-28T21:18:29.000+08:00,2021-05-10T20:42:43.000+08:00,17244,,,0,0,0,gitlab:GithubUser:78064625,LinghuChongHaha,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:890078421,https://github.com/panjf2000/ants/issues/155,,155,考虑将loopQueue的实现替换为栈,"""我在使用ant的过程发现一个这样的case，当qps出现陡增时，会新增很多worker到队列中，而当流量降下来后，这些worker因为还在循环工作，且过期时间设置偏大，导致worker的goroutine一直达不到过期条件，不能被回收，此后goroutine数量一直处于高位，利用率下降。这固然有过期时间设置不合理的原因，但在设计上也存在一定缺陷，如果使用栈，worker的detach和insert都在栈顶，则能显著提高单个goroutine的利用率，栈底用不到的worker也能更及时的被回收，retrieveExpiry函数从栈底开始遍历，同样满足栈底首个元素不过期，则整个栈的元素不过期。""",,,DONE,,0,2021-05-19T18:42:32.000+08:00,2021-05-12T21:13:58.000+08:00,2021-05-19T18:42:32.000+08:00,9928,,,0,0,0,gitlab:GithubUser:25758101,spadan,gitlab:GithubUser:0,,,
gitlab:GithubIssue:892678963,https://github.com/panjf2000/ants/issues/156,,156,retrieveExpiry中expiryTime问题,"""为什么是expiryTime := time.Now().Add(-duration)，而不是expiryTime := time.Now().Add(duration)？\r\n按照现在的实现，revertWorker设置worker.recycleTime = time.Now()，那么expiryTime肯定大于worker.recycleTime，导致worker用了一次必定被回收。引入expiryTime不就是为了多重复利用几次吗？ 有点不明白，望解答""",,,DONE,,0,2021-05-19T18:42:01.000+08:00,2021-05-16T22:08:19.000+08:00,2021-05-19T18:42:01.000+08:00,4113,,,0,0,0,gitlab:GithubUser:30179199,chenbyby,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:898973379,https://github.com/panjf2000/ants/issues/157,,157,期望暴露个 blockingNum 的统计数量,"""目前有：\r\n`p.Running()`\r\n`p.Free()`\r\n`p.Cap()`\r\n\r\n在并不想放开并发数的场景下，高峰时，\r\n`p.Free()` 可能较长时间为 `0`，\r\n此时很希望知道排队任务长度，即 `blockingNum` 数量或剩余排队数量 `options.MaxBlockingTasks` - `blockingNum`。""",,REQUIREMENT,DONE,,0,2022-05-07T22:45:12.000+08:00,2021-05-23T17:07:25.000+08:00,2022-05-07T22:45:12.000+08:00,502897,,,0,0,0,gitlab:GithubUser:4979407,fufuok,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:907118378,https://github.com/panjf2000/ants/issues/159,,159,关于panjf2000 / ants v2.0.0版本修复的问题,"""你好，我在v2.0.0看到如下描述\r\n![image](https://user-images.githubusercontent.com/53163548/120149656-9df6c480-c21c-11eb-8631-9128417da5a3.png)\r\n但是对比v1.2.0和v2.0.0的代码，我没看懂是如何解决这个问题的，或者这个问题是什么情况下会出现？\r\n可否给我讲解一下？\r\n""",,,DONE,,0,2021-05-31T14:35:13.000+08:00,2021-05-31T14:29:42.000+08:00,2021-05-31T14:44:53.000+08:00,5,,,0,0,0,gitlab:GithubUser:53163548,guoxinyu-shopee,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:907293042,https://github.com/panjf2000/ants/issues/163,,163,偶发情况下revertWorker内time.Now()占用CPU较高,"""hi，你好，pprof性能分析时， 偶尔会出现revertWorker内time.Now()占用CPU较高的情况，想请教一下，如果把获取当前时间换成另一种性能更好但可能有误差（误差5ms）的方法，会对整体有较大影响吗？我自己的理解，默认1s过期的情况下，可能会导致有些worker的回收时间延迟1s，但是不太清楚这个对ants整体的影响""",,,TODO,,0,,2021-05-31T17:29:31.000+08:00,2021-05-31T23:06:00.000+08:00,0,,,0,0,0,gitlab:GithubUser:22535169,chiselX,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:907817424,https://github.com/panjf2000/ants/issues/164,,164,使用sync.Map，有时会发生fatal error: concurrent map writes的问题,"""你好，我这边需要用goroutine对单个map进行操作，为了不产生concurrent map writes的问题，使用sync.Map，不通过您的框架，单纯使用goroutine貌似是OK的，但是使用了这个框架，有时候会报fatal error: concurrent map writes这个问题""",,BUG,DONE,,0,2021-06-01T10:52:29.000+08:00,2021-06-01T10:42:10.000+08:00,2021-06-01T10:52:29.000+08:00,10,,,0,0,0,gitlab:GithubUser:7382698,usst830514,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:913065024,https://github.com/panjf2000/ants/issues/165,,165,TestNonblockingSubmitWithFunc 随机成功或失败,"""**Describe the bug**\r\n当运行TestNonblockingSubmitWithFunc时，偶尔成功，偶尔失败：\r\n![image](https://user-images.githubusercontent.com/30179199/120957174-c3894e00-c787-11eb-9f08-e08af4afa86b.png)\r\n当多次运行该测试函数，出现如下结果：\r\n![image](https://user-images.githubusercontent.com/30179199/120957214-dc91ff00-c787-11eb-84cf-5e4f15d91e5d.png)\r\n\r\n**Error messages/Trace logs**\r\n=== RUN   TestNonblockingSubmitWithFunc\r\n    TestNonblockingSubmitWithFunc: ants_test.go:417: \r\n        \tError Trace:\tants_test.go:417\r\n        \tError:      \tAn error is expected but got nil.\r\n        \tTest:       \tTestNonblockingSubmitWithFunc\r\n        \tMessages:   \tnonblocking submit when pool is full should get an ErrPoolOverload\r\n--- FAIL: TestNonblockingSubmitWithFunc (0.00s)\r\nFAIL\r\n\r\n**System info (please complete the following information):**\r\n - OS: macOS,2.3 GHz 八核Intel Core i9,16 GB 2667 MHz DDR4\r\n - Go Version: 1.14.4\r\n - ants version: latest\r\n\r\n当p.Invoke(nil)改为p.Invoke(Param)，不会出现该问题""",,BUG,DONE,,0,2021-07-28T23:32:18.000+08:00,2021-06-07T12:03:24.000+08:00,2021-07-28T23:32:18.000+08:00,74128,,,0,0,0,gitlab:GithubUser:30179199,chenbyby,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:918864340,https://github.com/panjf2000/ants/issues/166,,166,最新的基准测试跑过了么，比不过原生的,"""**What is your question about ants?**\r\n\r\nBenchmarkAntsPool-12是BenchmarkGoroutines-12的两倍多，是我的机器不对么？还是后面代码写着写着就跑偏了？\r\n\r\n```sh\r\ngoos: darwin\r\ngoarch: amd64\r\npkg: github.com/panjf2000/ants/v2\r\ncpu: Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz\r\nBenchmarkGoroutines-12              \t       3\t 411810402 ns/op\t80012933 B/op\t 1000135 allocs/op\r\nBenchmarkSemaphore-12               \t       2\t 637331376 ns/op\t80197720 B/op\t 1002060 allocs/op\r\nBenchmarkAntsPool-12                \t       1\t1023957685 ns/op\t20676048 B/op\t 1063831 allocs/op\r\nBenchmarkGoroutinesThroughput-12    \t       3\t 403223552 ns/op\t82825797 B/op\t 1008366 allocs/op\r\nBenchmarkSemaphoreThroughput-12     \t       2\t 627645680 ns/op\t80062776 B/op\t 1000637 allocs/op\r\nBenchmarkAntsPoolThroughput-12      \t       2\t 936248712 ns/op\t 1887088 B/op\t   29047 allocs/op\r\nPASS\r\nok  \tgithub.com/panjf2000/ants/v2\t80.746s\r\n```\r\n""",,,DONE,,0,2021-06-12T00:05:34.000+08:00,2021-06-11T23:03:09.000+08:00,2021-06-18T17:59:51.000+08:00,62,,,0,0,0,gitlab:GithubUser:1940588,bingoohuang,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:930705346,https://github.com/panjf2000/ants/issues/168,,168,Announcement: please replace ants v1.2.0 with v1.2.1,"""## Dear users of `ants`\r\n\r\nThis is a notice about an issue of `ants` in GO modules, the v1.2.0 has been re-tagged with a new commit, which causes the **checksum mismatch** with Go modules and you may encounter this problem sometime, see #49 for details.\r\n\r\nTo cut a long story short, the quick fix for this issue is to replace the version of v1.2.0 with v1.2.1 in your `go.mod`, then you'll be free from the tiresome **checksum mismatch** problem.\r\n\r\nI'm sorry for the inconvenience caused to you.""",,,TODO,,0,,2021-06-26T22:21:38.000+08:00,2021-06-26T22:21:38.000+08:00,0,,,0,0,0,gitlab:GithubUser:7496278,panjf2000,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:931106727,https://github.com/panjf2000/ants/issues/169,,169,Cancel all task when has any task return error,"""**How to cancel all tasks when has any task return error?**\r\nI have two pools: pool1 and pool2. The result of tasks on pool1 to send tasks for pool2. When having any task error, how to cancel all tasks running in pool1 and pool2?\r\n""",,,DONE,,0,2021-07-06T16:41:36.000+08:00,2021-06-28T10:33:47.000+08:00,2021-07-06T16:41:36.000+08:00,11887,,,0,0,0,gitlab:GithubUser:38505126,ducpx,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:932236472,https://github.com/panjf2000/ants/issues/170,,170,purgePeriodically  for cycle do nothing？,"""**What is your question about ants?**\r\nhttps://github.com/panjf2000/ants/blob/master/pool_func.go#L81\r\nwhy do nothing？\r\nDo you need to add this line of code ？\r\nexpiredWorkers = append(expiredWorkers, idleWorkers[i])\r\n""",,,DONE,,0,2021-06-29T13:56:24.000+08:00,2021-06-29T13:47:51.000+08:00,2021-06-29T13:56:25.000+08:00,8,,,0,0,0,gitlab:GithubUser:49196656,leeliliang,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:938708991,https://github.com/panjf2000/ants/issues/171,,171,关于ants使用场景的疑问,"""针对大规模长连接（利用心跳机制，几乎不断），使用ants是否能带来性能提升呢？""",,,DONE,,0,2021-07-08T09:34:38.000+08:00,2021-07-07T17:54:18.000+08:00,2021-07-08T09:34:38.000+08:00,940,,,0,0,0,gitlab:GithubUser:33331974,DMwangnima,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:946771746,https://github.com/panjf2000/ants/issues/173,,173,对于 retrieveWorker 方法中阻塞队列的疑惑,"""您好，我比较疑惑 pool.go 里 retrieveWorker 方法中的这段代码，这里由于加了锁 p.lock.Lock()，而且只有在 p.cond.Wait() 之后才会解锁，所以应该永远只有一个goroutine在 Wait() 中阻塞等待，而其他goroutine都被挡在了 p.lock.Lock() 外面等待解锁。那么这样的话，我感觉任务提交的阻塞队列就失去了意义，对 p.blockingNum 的计数也没有意义了。不知道我的想法是否正确。\r\n`\r\n\tp.lock.Lock()\r\n\r\n\tw = p.workers.detach()\r\n\tif w != nil { // first try to fetch the worker from the queue\r\n\t\tp.lock.Unlock()\r\n\t} else if capacity := p.Cap(); capacity == -1 || capacity > p.Running() {\r\n\t\t// if the worker queue is empty and we don't run out of the pool capacity,\r\n\t\t// then just spawn a new worker goroutine.\r\n\t\tp.lock.Unlock()\r\n\t\tspawnWorker()\r\n\t} else { // otherwise, we'll have to keep them blocked and wait for at least one worker to be put back into pool.\r\n\t\tif p.options.Nonblocking {\r\n\t\t\tp.lock.Unlock()\r\n\t\t\treturn\r\n\t\t}\r\n\tretry:\r\n\t\tif p.options.MaxBlockingTasks != 0 && p.blockingNum >= p.options.MaxBlockingTasks {\r\n\t\t\tp.lock.Unlock()\r\n\t\t\treturn\r\n\t\t}\r\n\t\tp.blockingNum++\r\n\t\tp.cond.Wait() // block and wait for an available worker\r\n\t\tp.blockingNum--\r\n\t\tvar nw int\r\n\t\tif nw = p.Running(); nw == 0 { // awakened by the scavenger\r\n\t\t\tp.lock.Unlock()\r\n\t\t\tif !p.IsClosed() {\r\n\t\t\t\tspawnWorker()\r\n\t\t\t}\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif w = p.workers.detach(); w == nil {\r\n\t\t\tif nw < capacity {\r\n\t\t\t\tp.lock.Unlock()\r\n\t\t\t\tspawnWorker()\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tgoto retry\r\n\t\t}\r\n\r\n\t\tp.lock.Unlock()\r\n`""",,,DONE,,0,2021-07-17T18:55:18.000+08:00,2021-07-17T16:52:14.000+08:00,2021-07-30T10:30:06.000+08:00,123,,,0,0,0,gitlab:GithubUser:34757591,isAlbertYu,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:951582378,https://github.com/panjf2000/ants/issues/175,,175,doing so to call invoke does a lot of memory allocations.,"""doing so to call invoke does a lot of memory allocations.\r\n\r\npossible to replace {}Interface with [][]byte or something similar?\r\ncoz the allocation generated by using panjf is rather unbearable in high use case.\r\n\r\n                var val [][]byte\r\n                val = append(val,[]byte{0})\r\n                val = append(val,[]byte{uint8(k)})\r\n                val = append(val,[]byte{uint8(v)})\r\n                val = append(val,[]byte{uint8(c)})\r\n                val = append(val,kX) \r\n                val = append(val,b)\r\n                pdbrpool.Invoke(&val)\r\n""",,REQUIREMENT,TODO,,0,,2021-07-23T21:29:37.000+08:00,2021-07-24T19:15:17.000+08:00,0,,,0,0,0,gitlab:GithubUser:87639173,superdolt,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:953856676,https://github.com/panjf2000/ants/issues/177,,177,"func with lots of mutex lock and unlock, when heavily called, will eat up linux threads","""func with lots of mutex lock and unlock, when heavily called, will eat up linux threads and crash.\r\n\r\nthough i increased the debug.set max threads with runtime/debug, can this be resolved? \r\n\r\nthreads doesnt seem to be released / free up too.""",,BUG,DONE,,0,2021-07-27T21:19:36.000+08:00,2021-07-27T20:58:53.000+08:00,2021-07-27T21:20:15.000+08:00,20,,,0,0,0,gitlab:GithubUser:51492452,hiqsociety,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:953963592,https://github.com/panjf2000/ants/issues/178,,178,"try heavily overload panjf with lots of locks and unlock, then u can see lock slow, semaphore issues and crash","""try heavily overload panjf with lots of locks and unlock, then u can see lock slow, semaphore issues and crash\r\n\r\ngoroutine 6 [chan receive]:\r\ngithub.com/panjf2000/ants/v2.(*Pool).purgePeriodically(0xc000112460)\r\n        /root/go/pkg/mod/github.com/panjf2000/ants/v2@v2.4.6/pool.go:69 +0x109\r\ncreated by github.com/panjf2000/ants/v2.NewPool\r\n        /root/go/pkg/mod/github.com/panjf2000/ants/v2@v2.4.6/pool.go:137 +0x232\r\n\r\ngoroutine 7 [chan receive]:\r\ngithub.com/panjf2000/ants/v2.(*Pool).purgePeriodically(0xc0001124d0)\r\n        /root/go/pkg/mod/github.com/panjf2000/ants/v2@v2.4.6/pool.go:69 +0x109\r\ncreated by github.com/panjf2000/ants/v2.NewPool\r\n        /root/go/pkg/mod/github.com/panjf2000/ants/v2@v2.4.6/pool.go:137 +0x232\r\n\r\ngoroutine 21 [runnable]:\r\nsync.runtime_SemacquireMutex(0x15f56f4, 0x0, 0x1)\r\n        /usr/local/go/src/runtime/sema.go:71 +0x47\r\nsync.(*Mutex).lockSlow(0x15f56f0)\r\n        /usr/local/go/src/sync/mutex.go:138 +0x105\r\nsync.(*Mutex).Lock(...)\r\n        /usr/local/go/src/sync/mutex.go:81\r\n""",,BUG,DONE,,0,2022-03-21T10:39:49.000+08:00,2021-07-27T22:48:30.000+08:00,2022-03-21T10:39:49.000+08:00,340551,,,0,0,0,gitlab:GithubUser:51492452,hiqsociety,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:959089879,https://github.com/panjf2000/ants/issues/179,,179,是否可以限制单一goroutine的执行时间,"""请问关于ants，是否有接口可以限制单一goroutine执行时间的，比如我一次性下发20000个任务，但是我池子开了100个，那如果所有的都阻塞了，是否可以设置单一goroutine在阻塞20s以后自动结束当前任务，接收新的任务？\r\n""",,REQUIREMENT,DONE,,0,2021-08-08T11:53:20.000+08:00,2021-08-03T20:57:43.000+08:00,2021-08-08T11:53:20.000+08:00,6655,,,0,0,0,gitlab:GithubUser:17517153,Alberthchang,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:971116711,https://github.com/panjf2000/ants/issues/180,,180,在协程里频繁创建协程池有异常，貌似有协程泄露的问题,"""![image](https://user-images.githubusercontent.com/19659483/129477453-879a175b-fe83-4ef1-966a-1d5e58a9be2b.png)\r\n这边的do方法， 外层可以理解是个for循环， 会一直执行， 每次执行到setCardTime的时候， 都会执行如下\r\n![image](https://user-images.githubusercontent.com/19659483/129477515-663f0e4e-a9be-4c6e-9167-80a79c0240a7.png)\r\n经过反复测试， 就是这个函数， 如果把它注释掉， 协程数量和内存都正常，不会飙升， 一打开就异常 \r\n\r\nw.dataCenter.CarList是个list数组， 本次测试大概是1k数量\r\ngo版本1.15\r\nants版本1.3\r\n\r\n我把图片中的协程池方法单独拿出来\r\n![image](https://user-images.githubusercontent.com/19659483/129477621-800ddab2-b292-441a-9360-4d7aef6aa0cc.png)\r\n然后调用的时候\r\n![image](https://user-images.githubusercontent.com/19659483/129477630-0c4232d1-c4c8-415d-bd46-fcfa514c87b9.png)\r\n就一切正常，协程和内存都很稳定， 不知道这是否是个bug， 但是我这边肯定是有这个问题，这是线上问题， 定位一天了才定位到这个\r\n![image](https://user-images.githubusercontent.com/19659483/129477738-b167ff68-2d94-48b1-a9b3-59aa4b76d632.png)\r\n这是我们线上的内存监控， 毛刺都是有问题的版本， pprof监控也是， 最低协程数都在缓慢增长\r\n\r\n![image](https://user-images.githubusercontent.com/19659483/129477761-9e47d668-346d-4868-b0de-af607aa386e8.png)\r\n\r\n然后上面这个图， 是我改动之后的内存正常情况""",,BUG,DONE,,0,2021-11-27T17:17:03.000+08:00,2021-08-15T19:55:35.000+08:00,2021-11-27T17:17:03.000+08:00,149601,,,0,0,0,gitlab:GithubUser:19659483,ohmygd,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:971511276,https://github.com/panjf2000/ants/issues/181,,181,不太明白maxBlockingTasks的作用,"""retrieveWorker 函数里面有下面这段代码：\r\nif p.maxBlockingTasks != 0 && p.blockingNum >= p.maxBlockingTasks { \r\n\tp.lock.Unlock()\r\n\treturn nil\r\n}\r\np.blockingNum++\r\np.cond.Wait()\r\np.blockingNum--\r\n\r\n这里面我的理解是p.blockingNum应该不会超过2吧，因为retrieveWorker 里面有p.lock.Lock()加锁，同一时刻p.blockingNum不会有并发操作，当p.cond.Wait()这里被唤醒后，又执行了p.blockingNum-- 操作，一加一减，最后p.blockingNum又回归为0，所以不太明白maxBlockingTasks的实现是不是有达到作者本意，也不知道是不是我的分析有误，还望潘帅有空帮忙解答一番，谢谢！\r\n""",,,DONE,,0,2021-08-16T17:49:22.000+08:00,2021-08-16T16:51:30.000+08:00,2021-08-16T17:50:14.000+08:00,57,,,0,0,0,gitlab:GithubUser:10394162,jackerlu,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:984782442,https://github.com/panjf2000/ants/issues/182,,182,限制每秒钟最大执行数量,"""**Is your feature request related to a problem? Please describe.**\r\nI want use this lib to request a list of URL (restapi). But it limit request speed. If I didn't comply, It will throw a error.\r\n我想要请求一个URL列表（他们都是restapi），但是接口是有限速的，超过限速接口就会返回错误。\r\n\r\n**Describe the solution you'd like**\r\nSo I want a speedLimit option to limit go routine run  number every second.\r\nMaybe use channel and time.ticker to support it.\r\n所以我希望有一个每秒最大task运行数或者最小运行时间的参数，应该可以通过使用channel或time.ticker来实现。\r\n\r\n**Describe alternatives you've considered**\r\nIf this lib cannot support it, Maybe I'll add a time.ticker channel reciever at the head of worker function.\r\n如果库无法提供这个参数或者不应该提供此参数的话，那么我应该会在worker函数的开头增加上time.ticker chennel的接收器来完成限制\r\n""",,REQUIREMENT,DONE,,0,2021-09-04T18:21:31.000+08:00,2021-09-01T15:06:47.000+08:00,2021-09-04T18:21:31.000+08:00,4514,,,0,0,0,gitlab:GithubUser:3294100,likyh,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:987520012,https://github.com/panjf2000/ants/issues/183,,183,提供非阻塞的 Submit() 方法,"""**Is your feature request related to a problem? Please describe.**\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n\r\n**Describe the solution you'd like**\r\n期望pool有个提交任务的方法，该提交任务方法是非阻塞的，而且任务永久不会被丢弃，当超过了capacity后，pool内部维护一个队列或者数组存储该任务。\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n""",,REQUIREMENT,DONE,,0,2021-09-03T17:37:41.000+08:00,2021-09-03T16:05:01.000+08:00,2021-09-03T23:18:52.000+08:00,92,,,0,0,0,gitlab:GithubUser:7950702,liracle,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1047896477,https://github.com/panjf2000/ants/issues/194,,194,How do I call database insert operation using ants,"""I have a for loop, which inserts data into the 2 different tables. How can I use ants in this case.\r\n\r\n```go\r\n\r\nfor _, row := range rows {\r\n user := User{}\r\n user.Name = row.Name\r\n user.Email = row.Email\r\n err := dm.Insert(&user)\r\n if err != nil {\r\n  panic(err)\r\n }\r\n address := Address{}\r\n address.Address1 = row.Address1\r\n address.Address2 = row.Address2\r\n address.PinCode = row.PinCode\r\n address.City = row.City\r\n err := dm.Insert(&address)\r\n if err != nil {\r\n  panic(err)\r\n }\r\n}\r\n```\r\n""",,,TODO,,0,,2021-11-09T04:38:11.000+08:00,2022-03-10T15:27:10.000+08:00,0,,,0,0,0,gitlab:GithubUser:16970687,kiranupadhyak,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1054484973,https://github.com/panjf2000/ants/issues/195,,195,pool should be Independence,"""every goWork have Pool reference，it is very hard to understand.\r\nmaybe have a struct map will better \r\nthx """,,,DONE,,0,2021-11-17T21:07:32.000+08:00,2021-11-16T14:08:34.000+08:00,2021-11-17T21:07:32.000+08:00,1858,,,0,0,0,gitlab:GithubUser:45867365,venusDo,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1058613251,https://github.com/panjf2000/ants/issues/196,,196,频繁通过pool.Tune方法来实现动态增加/减少协程的数量,"""大概的代码逻辑，在一个定时器内进行了通道任务的数量的统计，通过这个通道的任务数量在一定的时间，来通过pool.Tune方法调整协程池的数量， 但是经过一段时间后，通过poll.*里面提供的方法去统计当前有，多少协程和空闲协程，会出现一定的负数，\r\n\r\npool.Tune(100)//通道任务有200个，开启100个协程处理\r\n\r\npool.Tune(500)//通道任务大于1000个，调整协程数量为500\r\n\r\npool.Tune(10)// 通道任务小于100，就把任务调整为10协程\r\n以此类推来实现 协程的动态调整，\r\n假如直接从500下调到10 会有什么不可以预估的问题吗？\r\n（后续贴代码）""",,,DONE,,0,2021-11-27T17:17:15.000+08:00,2021-11-19T22:50:48.000+08:00,2021-11-27T17:17:15.000+08:00,11186,,,0,0,0,gitlab:GithubUser:19727273,longrbl,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1060770678,https://github.com/panjf2000/ants/issues/197,,197,在传给Submit的task函数中调用Submit可能导致block,"""**Describe the bug**\r\n\r\n在传给Submit的task函数中调用Submit可能导致block\r\n\r\n下面是一段示例代码：\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\""fmt\""\r\n\t\""time\""\r\n\r\n\t\""github.com/panjf2000/ants/v2\""\r\n)\r\n\r\nfunc main() {\r\n\r\n\tp, _ := ants.NewPool(100)\r\n\r\n\tfor {\r\n\t\tp.Submit(func() {\r\n\t\t\tfor i := 0; i < 3; i++ {\r\n\t\t\t\tp.Submit(func() {\r\n\t\t\t\t\tfmt.Println(time.Now().Unix())\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n}\r\n```\r\n\r\n在ubuntu 20.04 amd64平台，使用go 1.17版本运行上述程序，会导致程序锁住。\r\n\r\n**To Reproduce**\r\n\r\n在linux上运行上述程序。\r\n\r\n**Expected behavior**\r\n\r\n没有锁住，一直执行下去。\r\n\r\n**Error messages/Trace logs**\r\n\r\n\r\n\r\n**System info (please complete the following information):**\r\n - OS: linux\r\n - Go Version: 1.17\r\n - ants version: 2.4.6\r\n\r\n**Additional context**\r\n\r\n我不确认在Submit提交的task函数中再次调用Submit是否是ok的？找了ants文档，没看到写不允许在Submit中调用Submit。\r\n\r\n另外初步分析了一下，Submit的task会被分配给pool中的worker。如果某个worker1执行task1，而task1又调用Submit task2，但task2恰好又被分给worker1，这样就锁住了。基于这个分析，我们可以很容易复现：\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\""fmt\""\r\n\t\""time\""\r\n\r\n\t\""github.com/panjf2000/ants/v2\""\r\n)\r\n\r\nfunc main() {\r\n\tp, _ := ants.NewPool(1)\r\n\r\n\terr := p.Submit(func() {\r\n\t\tfmt.Println(\""func in first submit...\"")\r\n\t\terr := p.Submit(func() {\r\n\t\t\tfmt.Println(\""submit in submit ...\"")\r\n\t\t\tfmt.Println(time.Now().Unix())\r\n\t\t\tfmt.Println(\""submit in submit ok\"")\r\n\t\t})\r\n\r\n\t\tif err != nil {\r\n\t\t\tfmt.Println(\""func in first submit err:\"", err)\r\n\t\t\treturn\r\n\t\t}\r\n\t\tfmt.Println(\""func in first submit ok\"")\r\n\t})\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println(\""first submit error:\"", err)\r\n\t}\r\n\r\n\ttime.Sleep(5 * time.Second)\r\n}\r\n```\r\n\r\n我们仅在pool中放置一个worker。这样就会导致block。\r\n\r\n""",,BUG,DONE,,0,2021-11-23T23:57:13.000+08:00,2021-11-23T10:15:39.000+08:00,2021-11-29T16:12:19.000+08:00,821,,,0,0,0,gitlab:GithubUser:419088,bigwhite,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1074045507,https://github.com/panjf2000/ants/issues/199,,199,worker with func exits from a panic: sync: negative WaitGroup counter,"""**What is your question about ants?**\r\nPlease describe your question meticulously.\r\n![image](https://user-images.githubusercontent.com/27792650/145157017-30598557-3105-4558-905e-d7fd11e73fb8.png)\r\n\r\n### **ERROR**\r\n\r\n![image](https://user-images.githubusercontent.com/27792650/145156779-48c197a9-4dc8-4ea2-84db-35c03efe1990.png)\r\n\r\n\r\n\r\n\r\nCentOS6.9 x64      go version go1.17.3 linux/amd64\r\n\r\n""",,,TODO,,0,,2021-12-08T14:05:37.000+08:00,2021-12-19T16:13:55.000+08:00,0,,,0,0,0,gitlab:GithubUser:27792650,WyntersN,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1074084207,https://github.com/panjf2000/ants/issues/200,,200,请问使用默认 AntsPool 需要手动释放资源吗？,"""hi，我刚上手这个组件，这是一个新手的问题。\r\n\r\n在我使用 ants.Submit(func() {}) 进行工作时，未手动初始化一个 pool，ants 会创建一个默认池。\r\n\r\n在我不需要重置资源的情况下，我是否不用去考虑调用 pool.Release() 释放资源呢？或者说在什么情况下我需要释放 pool ？或许是在项目重新部署时？\r\n""",,,DONE,,0,2022-05-07T22:57:13.000+08:00,2021-12-08T15:10:39.000+08:00,2022-05-07T22:57:13.000+08:00,216466,,,0,0,0,gitlab:GithubUser:62499904,guowei-gong,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1076267066,https://github.com/panjf2000/ants/issues/201,,201,你好，请问可以开个循环处理队列一直不关闭吗？会不会占用很高内存或者cpu,"""**What is your question about ants?**\r\n\r\n可以开个循环处理队列一直不关闭吗？会不会占用很高内存或者cpu\r\n\r\nPlease describe your question meticulously.\r\n\r\n伪代码：\r\n\r\n```\r\np, _ := ants.NewPoolWithFunc(pos, taskFunc, ants.WithNonblocking(true))\r\ndefer p.Release()\r\nfor {\r\n...\r\nvalue, ok := q.Get()\r\np.Invoke(value)\r\n...\r\n}\r\n```\r\n谢谢""",,,DONE,,0,2021-12-11T20:09:21.000+08:00,2021-12-10T09:12:49.000+08:00,2021-12-11T20:09:21.000+08:00,2096,,,0,0,0,gitlab:GithubUser:43238749,shikingram,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1078047238,https://github.com/panjf2000/ants/issues/202,,202,关闭Pool时出现异常行为,"""情景：两个goroutine在模拟生产者向Pool发送任务，任务需要执行一定时间，一段时间后需要关闭服务端，期望相关goroutine能正常退出\r\n问题：其中一个goroutine无法退出\r\n测试代码：\r\n```go\r\nfunc TestStop(t *testing.T) {\r\n\tvar wg sync.WaitGroup\r\n\tp, _ := NewPoolWithFunc(1, func(i interface{}) {\r\n\t\tfmt.Println(\""do task\"", i)\r\n\t\ttime.Sleep(2 * time.Second)\r\n\t})\r\n\twg.Add(2)\r\n\tgo func() {\r\n\t\tfmt.Println(\""start aaa\"")\r\n\t\tdefer func() {\r\n\t\t\twg.Done()\r\n\t\t\tfmt.Println(\""stop aaa\"")\r\n\t\t}()\r\n\t\tfor i := 0; i < 30; i++ {\r\n\t\t\tp.Invoke(i)\r\n\t\t}\r\n\t}()\r\n\r\n\tgo func() {\r\n\t\tfmt.Println(\""start bbb\"")\r\n\t\tdefer func() {\r\n\t\t\twg.Done()\r\n\t\t\tfmt.Println(\""stop bbb\"")\r\n\t\t}()\r\n\t\tfor i := 100; i < 130; i++ {\r\n\t\t\tp.Invoke(i)\r\n\t\t}\r\n\t}()\r\n\r\n\ttime.Sleep(5 * time.Second)\r\n\tp.Release()\r\n\twg.Wait()\r\n}\r\n```\r\nants version: v2.4.7 SHA-1: 1e897421860606afc3d1304cafe5cd187cee13e9\r\ngo version: 1.17.2""",,BUG,DONE,,0,2022-02-08T13:53:49.000+08:00,2021-12-13T11:36:28.000+08:00,2022-02-08T13:53:49.000+08:00,82217,,,0,0,0,gitlab:GithubUser:43245434,zhu121,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1080729448,https://github.com/panjf2000/ants/issues/203,,203,What is the appropriate number of goroutine pools for different hardware resources?,""" For example, what is the number of goroutine pools for a 4-core 8G device?\r\n""",,,DONE,,0,2021-12-16T21:29:49.000+08:00,2021-12-15T16:31:33.000+08:00,2021-12-16T21:29:49.000+08:00,1738,,,0,0,0,gitlab:GithubUser:19580983,NICEXAI,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1083013181,https://github.com/panjf2000/ants/issues/204,,204,如何设置协程池初始协程的大小的呢？有没有计算公式？,"""**What is your question about ants?**\r\nPlease describe your question meticulously.\r\n如何设置协程池初始协程的大小的呢？有没有计算公式？当前的机器环境4核8G""",,,DONE,,0,2022-03-09T15:13:26.000+08:00,2021-12-17T16:36:44.000+08:00,2022-03-09T15:13:26.000+08:00,117996,,,0,0,0,gitlab:GithubUser:12879248,18310983239,gitlab:GithubUser:7496278,panjf2000,,
gitlab:GithubIssue:1094905000,https://github.com/panjf2000/ants/issues/205,,205,当使用Tune(size int)放大容量时，之前blocking的任务并不会立即执行,"""当使用Tune(size int)放大容量时，之前blocking的任务并不会立即执行\r\n经过测试，正在运行的一个任务结束后才会按照当前被Tune后的真实cap去执行任务\r\n\r\n这里想问一下除了我在外坚挺cap变化后再提交新任务这种方法外，还有没有别的方法可以让我在放大容量后立即执行blocking的任务\r\n""",,,DONE,,0,2022-02-14T21:51:40.000+08:00,2022-01-06T10:23:30.000+08:00,2022-02-14T21:51:41.000+08:00,56848,,,0,0,0,gitlab:GithubUser:12636470,nzx824,gitlab:GithubUser:7496278,panjf2000,,
