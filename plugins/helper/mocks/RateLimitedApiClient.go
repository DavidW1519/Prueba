// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	http "net/http"

	common "github.com/apache/incubator-devlake/plugins/helper/common"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// RateLimitedApiClient is an autogenerated mock type for the RateLimitedApiClient type
type RateLimitedApiClient struct {
	mock.Mock
}

// GetAsync provides a mock function with given fields: path, query, header, handler
func (_m *RateLimitedApiClient) GetAsync(path string, query url.Values, header http.Header, handler common.ApiAsyncCallback) {
	_m.Called(path, query, header, handler)
}

// GetNumOfWorkers provides a mock function with given fields:
func (_m *RateLimitedApiClient) GetNumOfWorkers() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// HasError provides a mock function with given fields:
func (_m *RateLimitedApiClient) HasError() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NextTick provides a mock function with given fields: task
func (_m *RateLimitedApiClient) NextTick(task func() error) {
	_m.Called(task)
}

// WaitAsync provides a mock function with given fields:
func (_m *RateLimitedApiClient) WaitAsync() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewRateLimitedApiClientT interface {
	mock.TestingT
	Cleanup(func())
}

// NewRateLimitedApiClient creates a new instance of RateLimitedApiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRateLimitedApiClient(t NewRateLimitedApiClientT) *RateLimitedApiClient {
	mock := &RateLimitedApiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
