/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package apikeyhelper

import (
	"crypto/hmac"
	"crypto/sha256"
	"fmt"
	"github.com/apache/incubator-devlake/core/config"
	"github.com/apache/incubator-devlake/core/context"
	"github.com/apache/incubator-devlake/core/dal"
	"github.com/apache/incubator-devlake/core/errors"
	"github.com/apache/incubator-devlake/core/log"
	"github.com/apache/incubator-devlake/core/models"
	common "github.com/apache/incubator-devlake/core/models/common"
	"github.com/apache/incubator-devlake/core/utils"
	"github.com/spf13/viper"
	"os"
	"strings"
	"time"
)

const (
	EncodeKeyEnvStr = "ENCRYPTION_SECRET"
	apiKeyLen       = 128
)

type ApiKeyHelper struct {
	basicRes context.BasicRes
	cfg      *viper.Viper
	logger   log.Logger
}

func NewApiKeyHelper(basicRes context.BasicRes, logger log.Logger) *ApiKeyHelper {
	return &ApiKeyHelper{
		basicRes: basicRes,
		cfg:      config.GetConfig(),
		logger:   logger,
	}
}

func (c *ApiKeyHelper) getEncodeKeyEnv() (string, bool) {
	encodeKeyEnv := strings.TrimSpace(os.Getenv(EncodeKeyEnvStr))
	if encodeKeyEnv != "" {
		return encodeKeyEnv, true
	}
	encodeKeyEnv = strings.TrimSpace(c.cfg.GetString(EncodeKeyEnvStr))
	if encodeKeyEnv != "" {
		return encodeKeyEnv, true
	}
	return "", false
}

func (c *ApiKeyHelper) GenerateApiKey() (string, string, errors.Error) {
	randomApiKey, randomLetterErr := utils.RandLetterBytes(apiKeyLen)
	if randomLetterErr != nil {
		return "", "", errors.Default.Wrap(randomLetterErr, "random letters")
	}
	hashedApiKey, err := c.GenerateApiKeyWithToken(randomApiKey)
	return randomApiKey, hashedApiKey, err
}

func (c *ApiKeyHelper) GenerateApiKeyWithToken(token string) (string, errors.Error) {
	encodeKeyEnv, exist := c.getEncodeKeyEnv()
	if !exist {
		c.logger.Error(fmt.Errorf("EncodeKeyEnv doesn't exist"), "")
		err := errors.Default.New("encode key env doesn't exist")
		return "", err
	}
	h := hmac.New(sha256.New, []byte(encodeKeyEnv))
	if _, err := h.Write([]byte(token)); err != nil {
		c.logger.Error(err, "hmac write api key")
		return "", errors.Default.Wrap(err, "hmac write api key")
	}
	hashedApiKey := fmt.Sprintf("%x", h.Sum(nil))
	return hashedApiKey, nil
}

func (c *ApiKeyHelper) DeleteWithConnectionId(tx dal.Transaction, pluginType string, connectionId uint64) errors.Error {
	// delete api key generated by plugin, for example webhook
	var apiKey models.ApiKey
	clauses := []dal.Clause{
		dal.Where("extra = ? AND type = ?", fmt.Sprintf("connectionId:%d", connectionId), fmt.Sprintf("plugin:%s", pluginType)),
	}
	if err := tx.First(&apiKey, clauses...); err != nil {
		c.logger.Error(err, "query api key record")
		// if api key doesn't exist, just return success
		if tx.IsErrorNotFound(err.Unwrap()) {
			return nil
		} else {
			return err
		}
	}
	if err := tx.Delete(apiKey); err != nil {
		c.logger.Error(err, "delete api key record")
		return err
	}
	return nil
}

func (c *ApiKeyHelper) CreateWithConnectionId(tx dal.Transaction, userName, email string, pluginType string, connectionId uint64) (*models.ApiKey, errors.Error) {
	apiKey, hashedApiKey, err := c.GenerateApiKey()
	if err != nil {
		return nil, err
	}
	apiKeyRecord := &models.ApiKey{
		Model: common.Model{
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
		},
		Creator: common.Creator{
			Creator:      userName,
			CreatorEmail: email,
		},
		Updater: common.Updater{
			Updater:      userName,
			UpdaterEmail: email,
		},
		Name:        fmt.Sprintf("%s-%d", pluginType, connectionId),
		ApiKey:      hashedApiKey,
		ExpiredAt:   nil,
		AllowedPath: fmt.Sprintf("/plugins/%s/connection/%d/.*", pluginType, connectionId),
		Type:        fmt.Sprintf("plugin:%s", pluginType),
		Extra:       fmt.Sprintf("connectionId:%d", connectionId),
	}
	if err := tx.Create(apiKeyRecord); err != nil {
		c.logger.Error(err, "create api key record")
		return nil, err
	}
	apiKeyRecord.ApiKey = apiKey
	return apiKeyRecord, nil
}
